"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[144],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>y});var a=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=a.createContext({}),l=function(e){var n=a.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=t,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?a.createElement(y,i(i({ref:n},c),{},{components:r})):a.createElement(y,i({ref:n},c))}));function y(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:t,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2721:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=r(7462),t=(r(7294),r(3905));const o={sidebar_position:10},i="SWAGGER",s={unversionedId:"swagger",id:"swagger",title:"SWAGGER",description:"\xbfQu\xe9 es Swagger?",source:"@site/docs/swagger.md",sourceDirName:".",slug:"/swagger",permalink:"/api_cervezas_doc/docs/swagger",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/swagger.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"JSON Web Token",permalink:"/api_cervezas_doc/docs/jwr/jwt"}},p={},l=[{value:"\xbfQu\xe9 es Swagger?",id:"qu\xe9-es-swagger",level:2},{value:"Instalaci\xf3n y configuraci\xf3n",id:"instalaci\xf3n-y-configuraci\xf3n",level:2},{value:"Instalaci\xf3n",id:"instalaci\xf3n",level:3},{value:"Documentaci\xf3n controladores",id:"documentaci\xf3n-controladores",level:2},{value:"AuthController",id:"authcontroller",level:2},{value:"Anotaciones generales",id:"anotaciones-generales",level:3},{value:"<code>@OASecurityScheme</code>",id:"oasecurityscheme",level:3},{value:"<code>@OATag</code>",id:"oatag",level:3},{value:"POST Login",id:"post-login",level:3},{value:"POST Logout",id:"post-logout",level:3},{value:"POST Refresh",id:"post-refresh",level:3},{value:"CervezaController",id:"cervezacontroller",level:2},{value:"C\xf3digo completo del controlador",id:"c\xf3digo-completo-del-controlador",level:3},{value:"ColorController",id:"colorcontroller",level:2},{value:"GraduacionController",id:"graduacioncontroller",level:2},{value:"PaisController",id:"paiscontroller",level:2},{value:"TipoController",id:"tipocontroller",level:2}],c={toc:l},d="wrapper";function u(e){let{components:n,...r}=e;return(0,t.kt)(d,(0,a.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"swagger"},"SWAGGER"),(0,t.kt)("h2",{id:"qu\xe9-es-swagger"},"\xbfQu\xe9 es Swagger?"),(0,t.kt)("p",null,"Swagger es un conjunto de herramientas para dise\xf1ar, construir, documentar y consumir servicios web RESTful. La especificaci\xf3n Swagger define un est\xe1ndar para la documentaci\xf3n de servicios web RESTful, que permite a los desarrolladores entender r\xe1pidamente la funcionalidad de un servicio sin acceder a su c\xf3digo fuente o comprender su l\xf3gica interna. La documentaci\xf3n Swagger se presenta en un formato f\xe1cil de leer, y tambi\xe9n puede ser utilizada para generar autom\xe1ticamente interfaces de usuario y c\xf3digo cliente para consumir los servicios."),(0,t.kt)("p",null,"Swagger proporciona una manera est\xe1ndar de describir, documentar y consumir servicios web RESTful, facilitando la interoperabilidad entre servicios desarrollados por diferentes equipos y en diferentes plataformas. La especificaci\xf3n Swagger utiliza un formato JSON o YAML para describir la API REST, y las herramientas de Swagger pueden generar documentaci\xf3n interactiva, clientes de prueba y otras utilidades basadas en esta especificaci\xf3n."),(0,t.kt)("h2",{id:"instalaci\xf3n-y-configuraci\xf3n"},"Instalaci\xf3n y configuraci\xf3n"),(0,t.kt)("p",null,"La documentaci\xf3n del paquete de instalaci\xf3n puede encontrarla en el siguiente enlace:"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://github.com/DarkaOnLine/L5-Swagger/wiki/Installation-&-Configuration"},"https://github.com/DarkaOnLine/L5-Swagger/wiki/Installation-&-Configuration")),(0,t.kt)("h3",{id:"instalaci\xf3n"},"Instalaci\xf3n"),(0,t.kt)("p",null,'Instalar Swagger en Laravel 10 generalmente implica el uso de una herramienta llamada "L5-Swagger", que es un paquete de Laravel que facilita la integraci\xf3n de Swagger en una aplicaci\xf3n Laravel. Aqu\xed hay una gu\xeda b\xe1sica de los pasos a seguir:'),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Instalar el paquete L5-Swagger:"),"\nPuedes instalar el paquete utilizando Composer. Abre una terminal en el directorio de tu proyecto Laravel y ejecuta el siguiente comando:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"composer require darkaonline/l5-swagger\n"))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Dir\xedjase al archivo ",(0,t.kt)("strong",{parentName:"p"},"config/app.php")," y a\xf1ada a la secci\xf3n providers el siguiente c\xf3digo:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"L5Swagger\\L5SwaggerServiceProvider::class,\n"))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Publicar la configuraci\xf3n:"),"\nDespu\xe9s de instalar el paquete, necesitas publicar su configuraci\xf3n. Esto se puede hacer con el siguiente comando:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'php artisan vendor:publish --provider "L5Swagger\\L5SwaggerServiceProvider"\n')),(0,t.kt)("p",{parentName:"li"},"Este comando copiar\xe1 la configuraci\xf3n de Swagger al directorio ",(0,t.kt)("inlineCode",{parentName:"p"},"config")," de tu aplicaci\xf3n Laravel.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Configurar Swagger:"),"\nAbre el archivo de configuraci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"config/l5-swagger.php")," y ajusta la configuraci\xf3n seg\xfan tus necesidades. Puedes configurar cosas como la ruta de la documentaci\xf3n Swagger y otras opciones.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Generar la documentaci\xf3n:"),"\nDespu\xe9s de configurar L5-Swagger, puedes generar la documentaci\xf3n Swagger ejecutando el siguiente comando Artisan:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan l5-swagger:generate\n")),(0,t.kt)("p",{parentName:"li"},"Puedes hacer que la documentaci\xf3n se genere autom\xe1ticamente cada vez que haya un cambio, introduciendo la siguiente l\xednea en tu archivo ",(0,t.kt)("strong",{parentName:"p"},".env"),"."),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"L5_SWAGGER_GENERATE_ALWAYS=true\n")),(0,t.kt)("p",{parentName:"li"},"Esto generar\xe1 los archivos necesarios para la documentaci\xf3n de Swagger.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Acceder a la documentaci\xf3n:"),"\nPuedes acceder a la interfaz de Swagger visitando la URL especificada en tu configuraci\xf3n. Por defecto, podr\xeda ser algo como ",(0,t.kt)("inlineCode",{parentName:"p"},"http://tudominio.com/api/documentation"),". No se preocupe si se produce un error, pues todav\xeda queda documentar nuestros ",(0,t.kt)("strong",{parentName:"p"},"Endpoints"),"."))),(0,t.kt)("p",null,"Recuerda que la configuraci\xf3n puede variar seg\xfan tu aplicaci\xf3n y tus necesidades espec\xedficas. Aseg\xfarate de revisar la documentaci\xf3n oficial del paquete L5-Swagger para obtener informaci\xf3n detallada y posiblemente actualizaciones. Adem\xe1s, ten en cuenta que Laravel 10 puede tener cambios que no est\xe9n reflejados en esta secci\xf3n, por lo que siempre es recomendable consultar la documentaci\xf3n oficial de Laravel y de los paquetes espec\xedficos que est\xe1s utilizando."),(0,t.kt)("h2",{id:"documentaci\xf3n-controladores"},"Documentaci\xf3n controladores"),(0,t.kt)("h2",{id:"authcontroller"},"AuthController"),(0,t.kt)("p",null,"Empezaremos documentado el controlador ",(0,t.kt)("strong",{parentName:"p"},"AuthController"),", el encargado de manejar la autenticaci\xf3n."),(0,t.kt)("h3",{id:"anotaciones-generales"},"Anotaciones generales"),(0,t.kt)("p",null,"Introduzca el siguiente c\xf3digo antes de la definici\xf3n de la clase."),(0,t.kt)("h3",{id:"oasecurityscheme"},(0,t.kt)("inlineCode",{parentName:"h3"},"@OA\\SecurityScheme")),(0,t.kt)("p",null,"Definici\xf3n de la seguridad ",(0,t.kt)("strong",{parentName:"p"},"JWT"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\SecurityScheme(\n *      securityScheme="bearerAuth",\n *      type="http",\n *      scheme="bearer",\n *      bearerFormat="JWT",\n * )\n */\n')),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'securityScheme="bearerAuth"')),': Define un esquema de seguridad llamado "bearerAuth". Este esquema se utiliza para indicar que los endpoints asociados requieren un token de tipo Bearer para la autenticaci\xf3n.')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'type="http"')),": Indica que el esquema de seguridad se basa en un mecanismo HTTP.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'scheme="bearer"')),": Especifica que se utiliza el esquema de autenticaci\xf3n Bearer. En la autenticaci\xf3n Bearer, el token se incluye en el encabezado de autorizaci\xf3n de la solicitud HTTP.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'bearerFormat="JWT"')),": Indica que se espera que el token sea un token JWT (JSON Web Token)."))),(0,t.kt)("h3",{id:"oatag"},(0,t.kt)("inlineCode",{parentName:"h3"},"@OA\\Tag")),(0,t.kt)("p",null,"Definici\xf3n de tag"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Tag(\n *     name="Autenticaci\xf3n",\n *     description="Endpoints relacionados con la autenticaci\xf3n de usuarios"\n * )\n */\n')),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'name="Autenticaci\xf3n"')),': Asigna un nombre a la etiqueta, en este caso, "Autenticaci\xf3n". Las etiquetas se utilizan para organizar y categorizar los endpoints.')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'description="Endpoints relacionados con la autenticaci\xf3n de usuarios"')),': Proporciona una descripci\xf3n de la etiqueta. En este caso, indica que la etiqueta "Autenticaci\xf3n" se utiliza para endpoints relacionados con la autenticaci\xf3n de usuarios.'))),(0,t.kt)("p",null,'Estas anotaciones ayudan a documentar y organizar los endpoints relacionados con la autenticaci\xf3n en la especificaci\xf3n OpenAPI/Swagger. Al generar la documentaci\xf3n, estas anotaciones se traducir\xe1n en una secci\xf3n clara que describe c\xf3mo se deben autenticar las solicitudes a los endpoints y c\xf3mo est\xe1n agrupados bajo la etiqueta "Autenticaci\xf3n".'),(0,t.kt)("h3",{id:"post-login"},"POST Login"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * @OA\\Post(\n *      path="/api/login",\n *      operationId="login",\n *      tags={"Authentication"},\n *      summary="Iniciar sesi\xf3n de un usuario existente",\n *      description="Inicia sesi\xf3n de un usuario existente y devuelve un token de autorizaci\xf3n",\n *      @OA\\RequestBody(\n *          required=true,\n *          @OA\\MediaType(\n *              mediaType="application/json",\n *              @OA\\Schema(\n *                  @OA\\Property(property="email", type="string", example="user@example.com"),\n *                  @OA\\Property(property="password", type="string", example="password"),\n *              )\n *          )\n *      ),\n *      @OA\\Response(\n *          response=200,\n *          description="Inicio de sesi\xf3n exitoso",\n *          @OA\\JsonContent(\n *              @OA\\Property(property="usuario", type="object"),\n *              @OA\\Property(property="autorizacion", type="object",\n *                  @OA\\Property(property="token", type="string"),\n *                  @OA\\Property(property="tipo", type="string", example="bearer"),\n *              ),\n *          )\n *      ),\n *      @OA\\Response(\n *          response=401,\n *          description="No autorizado",\n *          @OA\\JsonContent(\n *              @OA\\Property(property="mensaje", type="string"),\n *          )\n *      ),\n *      @OA\\Response(\n *          response=422,\n *          description="Error de validaci\xf3n",\n *          @OA\\JsonContent(\n *              @OA\\Property(property="errores", type="object"),\n *          )\n *      ),\n * )\n */\n')),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\Post")),": Indica que se trata de un endpoint HTTP de tipo POST.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'path="/api/login"')),": Especifica la ruta del endpoint.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'operationId="login"')),": Identificador \xfanico para la operaci\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'tags={"Authentication"}')),': Asigna la operaci\xf3n a la etiqueta "Authentication" para agruparla en la documentaci\xf3n.')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'summary="Iniciar sesi\xf3n de un usuario existente"')),": Breve descripci\xf3n del prop\xf3sito de la operaci\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'description="Inicia sesi\xf3n de un usuario existente y devuelve un token de autorizaci\xf3n"')),": Descripci\xf3n m\xe1s detallada de la operaci\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\RequestBody")),": Define el cuerpo de la solicitud."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"required=true")),": Indica que el cuerpo de la solicitud es obligatorio.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\MediaType")),": Define el tipo de medio de la solicitud como JSON."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'mediaType="application/json"')),": Especifica que el tipo de medio es JSON.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\Schema")),": Define la estructura del cuerpo de la solicitud.")))))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\Response")),": Define las posibles respuestas de la operaci\xf3n."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"response=200")),": Respuesta exitosa."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'description="Inicio de sesi\xf3n exitoso"')),": Descripci\xf3n de la respuesta.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\JsonContent")),": Define el contenido de la respuesta en formato JSON."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\Property(property="usuario", type="object")')),': Propiedad "usuario" de tipo objeto en la respuesta JSON.')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\Property(property="autorizacion", type="object")')),': Propiedad "autorizacion" de tipo objeto en la respuesta JSON.'),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\Property(property="token", type="string")')),': Propiedad "token" de tipo cadena en el objeto de autorizaci\xf3n.')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\Property(property="tipo", type="string", example="bearer")')),': Propiedad "tipo" de tipo cadena en el objeto de autorizaci\xf3n, con ejemplo "bearer".')))))))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"response=401")),": Respuesta para el caso de no autorizaci\xf3n."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'description="No autorizado"')),": Descripci\xf3n de la respuesta.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\JsonContent(property="mensaje", type="string")')),': Propiedad "mensaje" de tipo cadena en la respuesta JSON.')))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"response=422")),": Respuesta para el caso de error de validaci\xf3n."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'description="Error de validaci\xf3n"')),": Descripci\xf3n de la respuesta.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\JsonContent(property="errores", type="object")')),': Propiedad "errores" de tipo objeto en la respuesta JSON.'))))))),(0,t.kt)("p",null,"Estas anotaciones de Swagger proporcionan informaci\xf3n detallada sobre c\xf3mo se debe utilizar y qu\xe9 esperar al interactuar con el endpoint de inicio de sesi\xf3n en la API. Al generar la documentaci\xf3n, esta informaci\xf3n se presenta de manera organizada para que los desarrolladores comprendan c\xf3mo utilizar este endpoint."),(0,t.kt)("h3",{id:"post-logout"},"POST Logout"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Post(\n *      path="/api/v1/logout",\n *      operationId="logout",\n *      tags={"Authentication"},\n *      summary="Cerrar sesi\xf3n del usuario autenticado",\n *      description="Cierra la sesi\xf3n del usuario autenticado",\n *      security={{"bearerAuth": {}}},\n *      @OA\\Response(\n *          response=200,\n *          description="Cierre de sesi\xf3n exitoso",\n *          @OA\\JsonContent(\n *              @OA\\Property(property="message", type="string"),\n *          )\n *      ),\n * )\n */\n')),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\Post")),": Indica que esta anotaci\xf3n est\xe1 asociada a una operaci\xf3n HTTP de tipo POST.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'path="/api/v1/logout"')),": Especifica la ruta del endpoint para el cierre de sesi\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'operationId="logout"')),": Identificador \xfanico para la operaci\xf3n. Ayuda a distinguir entre operaciones en la documentaci\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'tags={"Authentication"}')),': Asigna la operaci\xf3n a la etiqueta "Authentication", indicando que est\xe1 relacionada con la autenticaci\xf3n y agrup\xe1ndola en la documentaci\xf3n.')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'summary="Cerrar sesi\xf3n del usuario autenticado"')),": Proporciona un resumen breve de la operaci\xf3n, indicando que es para cerrar la sesi\xf3n de un usuario autenticado.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'description="Cierra la sesi\xf3n del usuario autenticado"')),": Proporciona una descripci\xf3n m\xe1s detallada de la operaci\xf3n, explicando que su prop\xf3sito es cerrar la sesi\xf3n de un usuario autenticado.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'security={{"bearerAuth": {}}}')),": Especifica que esta operaci\xf3n requiere autenticaci\xf3n mediante un token Bearer. Indica que el usuario debe estar autenticado para realizar esta operaci\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\Response")),": Define las posibles respuestas de la operaci\xf3n."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"response=200")),": Respuesta exitosa para el cierre de sesi\xf3n."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'description="Cierre de sesi\xf3n exitoso"')),": Descripci\xf3n de la respuesta.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\JsonContent")),": Define el contenido de la respuesta en formato JSON."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("strong",{parentName:"li"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\Property(property="message", type="string")')),': Propiedad "message" de tipo cadena en la respuesta JSON. En este caso, se espera que contenga un mensaje indicando que el cierre de sesi\xf3n fue exitoso.')))))))),(0,t.kt)("p",null,"Esta anotaci\xf3n documenta claramente c\xf3mo realizar el cierre de sesi\xf3n en la API, qu\xe9 esperar como respuesta exitosa y qu\xe9 seguridad se requiere para realizar esta operaci\xf3n. Al generar la documentaci\xf3n, esta informaci\xf3n se presentar\xe1 de manera organizada para los desarrolladores que utilicen tu API."),(0,t.kt)("h3",{id:"post-refresh"},"POST Refresh"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Post(\n *      path="/api/v1/refresh",\n *      operationId="refresh",\n *      tags={"Authentication"},\n *      summary="Actualizar el token de autenticaci\xf3n",\n *      description="Actualiza el token de autenticaci\xf3n para el usuario autenticado",\n *      security={{"bearerAuth": {}}},\n *      @OA\\Response(\n *          response=200,\n *          description="Token de autenticaci\xf3n actualizado exitosamente",\n *          @OA\\JsonContent(\n *              @OA\\Property(property="user", type="object"),\n *              @OA\\Property(property="authorization", type="object",\n *                  @OA\\Property(property="token", type="string"),\n *                  @OA\\Property(property="type", type="string", example="bearer"),\n *              ),\n *          )\n *      ),\n * )\n */\n')),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\Post")),": Indica que esta anotaci\xf3n est\xe1 asociada a una operaci\xf3n HTTP de tipo POST.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'path="/api/v1/refresh"')),": Especifica la ruta del endpoint para la actualizaci\xf3n del token de autenticaci\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'operationId="refresh"')),": Identificador \xfanico para la operaci\xf3n. Ayuda a distinguir entre operaciones en la documentaci\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'tags={"Authentication"}')),': Asigna la operaci\xf3n a la etiqueta "Authentication", indicando que est\xe1 relacionada con la autenticaci\xf3n y agrup\xe1ndola en la documentaci\xf3n.')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'summary="Actualizar el token de autenticaci\xf3n"')),": Proporciona un resumen breve de la operaci\xf3n, indicando que es para actualizar el token de autenticaci\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'description="Actualiza el token de autenticaci\xf3n para el usuario autenticado"')),": Proporciona una descripci\xf3n m\xe1s detallada de la operaci\xf3n, explicando que su prop\xf3sito es actualizar el token de autenticaci\xf3n para el usuario autenticado.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'security={{"bearerAuth": {}}}')),": Especifica que esta operaci\xf3n requiere autenticaci\xf3n mediante un token Bearer. Indica que el usuario debe estar autenticado para realizar esta operaci\xf3n.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\Response")),": Define las posibles respuestas de la operaci\xf3n."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"response=200")),": Respuesta exitosa para la actualizaci\xf3n del token de autenticaci\xf3n."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'description="Token de autenticaci\xf3n actualizado exitosamente"')),": Descripci\xf3n de la respuesta.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"@OA\\JsonContent")),": Define el contenido de la respuesta en formato JSON."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\Property(property="user", type="object")')),': Propiedad "user" de tipo objeto en la respuesta JSON. Indica que se espera informaci\xf3n del usuario en la respuesta.')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\Property(property="authorization", type="object"')),': Propiedad "authorization" de tipo objeto en la respuesta JSON.'),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\Property(property="token", type="string")')),': Propiedad "token" de tipo cadena en la respuesta JSON. Indica que se espera un nuevo token de autenticaci\xf3n.')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},'@OA\\Property(property="type", type="string", example="bearer")')),': Propiedad "type" de tipo cadena en la respuesta JSON. Indica el tipo de token, que en este caso es "bearer".'))))))))))),(0,t.kt)("p",null,"Esta anotaci\xf3n documenta claramente c\xf3mo realizar la actualizaci\xf3n del token de autenticaci\xf3n en la API, qu\xe9 esperar como respuesta exitosa y qu\xe9 seguridad se requiere para realizar esta operaci\xf3n."),(0,t.kt)("h2",{id:"cervezacontroller"},"CervezaController"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * @OA\\Info(\n *     title="Cervezas de Importaci\xf3n e-commerce",\n *     version="1.0",\n *     description="Descripcion"\n * )\n *\n * @OA\\Server(url="http://localhost:8000")\n *\n * @OA\\Schema(\n *     schema="Cerveza",\n *     @OA\\Property(property="id", type="integer"),\n *     @OA\\Property(property="nombre", type="string"),\n *     @OA\\Property(property="descripcion", type="string"),\n *     @OA\\Property(property="color", type="string"),\n *     @OA\\Property(property="graduacion", type="string"),\n *     @OA\\Property(property="tipo", type="string"),\n *     @OA\\Property(property="pais", type="string"),\n *     @OA\\Property(property="novedad", type="boolean"),\n *     @OA\\Property(property="oferta", type="boolean"),\n *     @OA\\Property(property="precio", type="number"),\n *     @OA\\Property(property="foto", type="string"),\n *     @OA\\Property(property="marca", type="string"),\n * )\n */\n')),(0,t.kt)("admonition",{title:"Significado de las anotaciones",type:"info"},(0,t.kt)("ol",{parentName:"admonition"},(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("inlineCode",{parentName:"p"},"@OA\\Info"),": Esta anotaci\xf3n define informaci\xf3n general sobre la API."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"title"),': Especifica el t\xedtulo de la API ("Cervezas de Importaci\xf3n e-commerce").'),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"version"),': Indica la versi\xf3n de la API ("1.0").'),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"description"),': Proporciona una descripci\xf3n general de la API ("Descripcion").'))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("inlineCode",{parentName:"p"},"@OA\\Server"),": Define el servidor base para la API."),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"url"),': Establece la URL base del servidor ("http://localhost:8000").'))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("inlineCode",{parentName:"p"},"@OA\\Schema"),': Define un esquema de datos llamado "Cerveza" que describe la estructura de los objetos de tipo cerveza en la API.'),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"@OA\\Property"),': Especifica las propiedades de un objeto "Cerveza", cada una con su nombre y tipo.',(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"id"),": Tipo entero."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"nombre"),": Tipo cadena de texto."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"descripcion"),": Tipo cadena de texto."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"color"),": Tipo cadena de texto."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"graduacion"),": Tipo cadena de texto."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"tipo"),": Tipo cadena de texto."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"pais"),": Tipo cadena de texto."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"novedad"),": Tipo booleano."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"oferta"),": Tipo booleano."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"precio"),": Tipo n\xfamero."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"foto"),": Tipo cadena de texto."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"marca"),": Tipo cadena de texto."))))))),(0,t.kt)("h3",{id:"c\xf3digo-completo-del-controlador"},"C\xf3digo completo del controlador"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Validator;\nuse App\\Models\\Cerveza;\nuse App\\Models\\Color;\nuse App\\Models\\Graduacion;\nuse App\\Models\\Pais;\nuse App\\Models\\Tipo;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Storage;\n\n/**\n * @OA\\Info(\n *     title="Cervezas de Importaci\xf3n e-commerce",\n *     version="1.0",\n *     description="Descripcion"\n * )\n *\n * @OA\\Server(url="http://localhost:8000")\n *\n * @OA\\Schema(\n *     schema="Cerveza",\n *     @OA\\Property(property="id", type="integer"),\n *     @OA\\Property(property="nombre", type="string"),\n *     @OA\\Property(property="descripcion", type="string"),\n *     @OA\\Property(property="color", type="string"),\n *     @OA\\Property(property="graduacion", type="string"),\n *     @OA\\Property(property="tipo", type="string"),\n *     @OA\\Property(property="pais", type="string"),\n *     @OA\\Property(property="novedad", type="boolean"),\n *     @OA\\Property(property="oferta", type="boolean"),\n *     @OA\\Property(property="precio", type="number"),\n *     @OA\\Property(property="foto", type="string"),\n *     @OA\\Property(property="marca", type="string"),\n * )\n */\n\n\nclass CervezaController extends Controller\n{\n    /**\n     * @OA\\SecurityScheme(\n     *     type="http",\n     *     description="Autenticaci\xf3n Bearer JWT",\n     *     scheme="bearer",\n     *     securityScheme="bearerAuth"\n     * )\n     */\n\n    public function __construct()\n    {\n        $this->middleware(\'auth:api\')->only([\'store\', \'destroy\', \'update\', \'patch\']);\n    }\n    /**\n     * Display a listing of the resource.\n     */\n    /**\n     * @OA\\Get(\n     *      path="/api/v1/cervezas",\n     *      operationId="getCervezasList",\n     *      tags={"Cervezas"},\n     *      summary="Obtener la lista de cervezas",\n     *      description="Devuelve la lista de cervezas",\n     *      @OA\\Parameter(\n     *          name="per_page",\n     *          description="Number of items per page",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="integer")\n     *      ),\n     *      @OA\\Parameter(\n     *          name="page",\n     *          description="Page number",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="integer")\n     *      ),\n     *      @OA\\Parameter(\n     *          name="color_id",\n     *          description="Filter by color ID",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="integer")\n     *      ),\n     *      @OA\\Parameter(\n     *          name="pais_id",\n     *          description="Filter by pais ID",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="integer")\n     *      ),\n     *      @OA\\Parameter(\n     *          name="tipo_id",\n     *          description="Filter by tipo ID",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="integer")\n     *      ),\n     *      @OA\\Parameter(\n     *          name="novedad",\n     *          description="Filter by novedad",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="boolean")\n     *      ),\n     *      @OA\\Parameter(\n     *          name="oferta",\n     *          description="Filter by oferta",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="boolean")\n     *      ),\n     *      @OA\\Parameter(\n     *          name="marca",\n     *          description="Filter by marca",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\Parameter(\n     *          name="precio_desde",\n     *          description="Filter by minimum price",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="numeric")\n     *      ),\n     *      @OA\\Parameter(\n     *          name="precio_hasta",\n     *          description="Filter by maximum price",\n     *          required=false,\n     *          in="query",\n     *          @OA\\Schema(type="numeric")\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Successful operation",\n     *          @OA\\JsonContent(\n     *              type="array",\n     *              @OA\\Items(ref="#/components/schemas/Cerveza")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=400,\n     *          description="Bad request"\n     *      )\n     * )\n     */\n    public function index(Request $request)\n    {\n        // Recopila par\xe1metros de consulta desde la solicitud\n        $perPage = $request->input(\'per_page\', 10);\n        $page = $request->input(\'page\', 1);\n        $colorId = $request->input(\'color_id\');\n        $paisId = $request->input(\'pais_id\');\n        $tipoId = $request->input(\'tipo_id\');\n        $novedad = $request->input(\'novedad\');\n        $oferta = $request->input(\'oferta\');\n        $marca = $request->input(\'marca\');\n        $precioDesde = $request->input(\'precio_desde\');\n        $precioHasta = $request->input(\'precio_hasta\');\n\n        // Construye una consulta utilizando el Query Builder de Laravel\n        $query = DB::table(\'cervezas as cer\')\n            ->select(\'cer.id\', \'cer.nombre\', \'cer.descripcion\', \'cer.novedad\', \'cer.oferta\', \'cer.precio\', \'cer.foto\', \'cer.marca\', \'col.nombre as color\', \'g.nombre as graduacion\', \'t.nombre as tipo\', \'p.nombre as pais\')\n            ->join(\'colores as col\', \'cer.color_id\', \'=\', \'col.id\')\n            ->join(\'graduaciones as g\', \'cer.graduacion_id\', \'=\', \'g.id\')\n            ->join(\'tipos as t\', \'cer.tipo_id\', \'=\', \'t.id\')\n            ->join(\'paises as p\', \'cer.pais_id\', \'=\', \'p.id\')\n            ->orderBy(\'cer.nombre\');\n\n        // Aplica condiciones seg\xfan los par\xe1metros de consulta\n        if ($colorId) {\n            $query->where(\'cer.color_id\', $colorId);\n        }\n\n        if ($paisId) {\n            $query->where(\'cer.pais_id\', $paisId);\n        }\n\n        if ($tipoId) {\n            $query->where(\'cer.tipo_id\', $tipoId);\n        }\n\n        if ($novedad) {\n            $query->where(\'cer.novedad\', $novedad);\n        }\n\n        if ($oferta) {\n            $query->where(\'cer.oferta\', $oferta);\n        }\n\n        if ($marca) {\n            // Realiza una b\xfasqueda de marca insensible a may\xfasculas y min\xfasculas\n            $query->whereRaw(\'LOWER(cer.marca) LIKE ?\', [\'%\' . strtolower($marca) . \'%\']);\n        }\n\n        if ($precioDesde && $precioHasta) {\n            $query->whereBetween(\'cer.precio\', [$precioDesde, $precioHasta]);\n        }\n\n        // Realiza una paginaci\xf3n de los resultados\n        $results = $query->paginate($perPage, [\'*\'], \'page\', $page);\n\n        // Devuelve una respuesta JSON con los resultados paginados\n        return response()->json($results);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    /**\n     * @OA\\Post(\n     *      path="/api/v1/cervezas",\n     *      operationId="storeCerveza",\n     *      tags={"Cervezas"},\n     *      summary="Create a new cerveza",\n     *      description="Creates a new cerveza and stores it in the database",\n     *      security={{"bearerAuth": {}}},\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          @OA\\MediaType(\n     *              mediaType="application/json",\n     *              @OA\\Schema(\n     *                  @OA\\Property(property="nombre", type="string"),\n     *                  @OA\\Property(property="descripcion", type="string"),\n     *                  @OA\\Property(property="color_id", type="integer"),\n     *                  @OA\\Property(property="graduacion_id", type="integer"),\n     *                  @OA\\Property(property="tipo_id", type="integer"),\n     *                  @OA\\Property(property="pais_id", type="integer"),\n     *                  @OA\\Property(property="novedad", type="boolean"),\n     *                  @OA\\Property(property="oferta", type="boolean"),\n     *                  @OA\\Property(property="precio", type="number"),\n     *                  @OA\\Property(property="foto", type="string", format="binary"),\n     *                  @OA\\Property(property="marca", type="string"),\n     *              ),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=201,\n     *          description="Cerveza created successfully",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="id", type="integer"),\n     *              @OA\\Property(property="nombre", type="string"),\n     *              @OA\\Property(property="descripcion", type="string"),\n     *              @OA\\Property(property="color_id", type="integer"),\n     *              @OA\\Property(property="graduacion_id", type="integer"),\n     *              @OA\\Property(property="tipo_id", type="integer"),\n     *              @OA\\Property(property="pais_id", type="integer"),\n     *              @OA\\Property(property="novedad", type="boolean"),\n     *              @OA\\Property(property="oferta", type="boolean"),\n     *              @OA\\Property(property="precio", type="number"),\n     *              @OA\\Property(property="foto", type="string"),\n     *              @OA\\Property(property="marca", type="string"),\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=400,\n     *          description="Bad request",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=401,\n     *          description="Unauthorized",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=500,\n     *          description="Internal Server Error",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     * )\n     */\n    public function store(Request $request)\n    {\n        // Comenzar una transacci\xf3n de base de datos\n        DB::beginTransaction();\n\n        try {\n            // Define las reglas de validaci\xf3n para los campos\n            $rules = [\n                \'nombre\' => \'required|unique:cervezas\',\n                \'descripcion\' => \'required\',\n                \'color_id\' => \'required|numeric\',\n                \'graduacion_id\' => \'required|numeric\',\n                \'tipo_id\' => \'required|numeric\',\n                \'pais_id\' => \'required|numeric\',\n                \'novedad\' => \'required|boolean\',\n                \'oferta\' => \'required|boolean\',\n                \'precio\' => \'required|numeric\',\n                \'foto\' => \'required|image|max:2048\',\n                \'marca\' => \'required\',\n            ];\n\n            // Realiza la validaci\xf3n de la solicitud\n            $validator = Validator::make($request->all(), $rules);\n\n            // Si la validaci\xf3n falla, devuelve una respuesta JSON con los errores de validaci\xf3n\n            if ($validator->fails()) {\n                DB::rollback();\n                return response()->json($validator->errors(), 400);\n            }\n\n            // Valida la existencia de valores relacionados (por ejemplo, color, graduaci\xf3n, pa\xeds, tipo)\n\n            $color_id = $request->input(\'color_id\');\n            $color = Color::find($color_id);\n            if (!$color) {\n                DB::rollback();\n                return response()->json(\'El color_id \' . $color_id . \' no existe\', 404);\n            }\n\n            $graduacion_id = $request->input(\'graduacion_id\');\n            $graduacion = Graduacion::find($graduacion_id);\n            if (!$graduacion) {\n                DB::rollback();\n                return response()->json(\'La graduacion_id \' . $graduacion_id . \' no existe\', 404);\n            }\n\n            $pais_id = $request->input(\'pais_id\');\n            $pais = Pais::find($pais_id);\n            if (!$pais) {\n                DB::rollback();\n                return response()->json(\'El pais_id \' . $pais_id . \' no existe\', 404);\n            }\n\n            $tipo_id = $request->input(\'tipo_id\');\n            $tipo = Tipo::find($tipo_id);\n            if (!$tipo) {\n                DB::rollback();\n                return response()->json(\'El tipo_id \' . $tipo_id . \' no existe\', 404);\n            }\n\n            $cerveza = $request->all();\n            // Procesa la imagen y gu\xe1rdala en la carpeta \'storage/images\'\n            if ($request->hasFile(\'foto\')) {\n                $path = $request->file(\'foto\')->store(\'/public/images\');\n                $url = url(\'/\') . \'/storage/images/\' . basename($path); // \'images\' es la subcarpeta donde se almacenar\xe1 la imagen\n\n                $cerveza[\'foto\'] = $url; // Actualiza el campo \'foto\' con la ubicaci\xf3n de la imagen almacenad\n            }\n\n            // Guardar la cerveza en la base de datos\n            $cerveza = Cerveza::create($cerveza);\n\n            // Confirmar la transacci\xf3n si todo se complet\xf3 con \xe9xito\n            DB::commit();\n\n            // Devuelve una respuesta JSON con la cerveza reci\xe9n creada y el c\xf3digo de respuesta 201 (creado)\n            return response()->json($cerveza, 201);\n        } catch (Exception $e) {\n            // Revertir la transacci\xf3n en caso de fallo\n            DB::rollback();\n\n            // Devuelve una respuesta de error\n            return response()->json(\'Error al procesar la solicitud\', 500);\n        }\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    /**\n     * @OA\\Get(\n     *      path="/api/v1/cervezas/{id}",\n     *      operationId="getCervezaById",\n     *      tags={"Cervezas"},\n     *      summary="Get cerveza details by ID",\n     *      description="Returns details of a cerveza based on its ID",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          description="ID of the cerveza",\n     *          required=true,\n     *          in="path",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Successful operation",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="id", type="integer"),\n     *              @OA\\Property(property="nombre", type="string"),\n     *              @OA\\Property(property="descripcion", type="string"),\n     *              @OA\\Property(property="color_id", type="integer"),\n     *              @OA\\Property(property="graduacion_id", type="integer"),\n     *              @OA\\Property(property="tipo_id", type="integer"),\n     *              @OA\\Property(property="pais_id", type="integer"),\n     *              @OA\\Property(property="novedad", type="boolean"),\n     *              @OA\\Property(property="oferta", type="boolean"),\n     *              @OA\\Property(property="precio", type="number"),\n     *              @OA\\Property(property="foto", type="string"),\n     *              @OA\\Property(property="marca", type="string"),\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Cerveza not found",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=401,\n     *          description="Unauthorized",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=500,\n     *          description="Internal Server Error",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     * )\n     */\n\n    public function show(string $id)\n    {\n        $cerveza = Cerveza::find($id);\n        return response()->json($cerveza, 200);\n    }\n\n    /**\n     * @OA\\Put(\n     *      path="/api/v1/cervezas/{id}",\n     *      operationId="updateCerveza",\n     *      tags={"Cervezas"},\n     *      summary="Update cerveza details by ID",\n     *      description="Updates details of a cerveza based on its ID",\n     *      security={{"bearerAuth": {}}},\n     *      @OA\\Parameter(\n     *          name="id",\n     *          description="ID of the cerveza",\n     *          required=true,\n     *          in="path",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Cerveza details to be updated",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="nombre", type="string"),\n     *              @OA\\Property(property="descripcion", type="string"),\n     *              @OA\\Property(property="color_id", type="integer"),\n     *              @OA\\Property(property="graduacion_id", type="integer"),\n     *              @OA\\Property(property="tipo_id", type="integer"),\n     *              @OA\\Property(property="pais_id", type="integer"),\n     *              @OA\\Property(property="novedad", type="boolean"),\n     *              @OA\\Property(property="oferta", type="boolean"),\n     *              @OA\\Property(property="precio", type="number"),\n     *              @OA\\Property(property="foto", type="string"),\n     *              @OA\\Property(property="marca", type="string"),\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Successful operation",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="id", type="integer"),\n     *              @OA\\Property(property="nombre", type="string"),\n     *              @OA\\Property(property="descripcion", type="string"),\n     *              @OA\\Property(property="color_id", type="integer"),\n     *              @OA\\Property(property="graduacion_id", type="integer"),\n     *              @OA\\Property(property="tipo_id", type="integer"),\n     *              @OA\\Property(property="pais_id", type="integer"),\n     *              @OA\\Property(property="novedad", type="boolean"),\n     *              @OA\\Property(property="oferta", type="boolean"),\n     *              @OA\\Property(property="precio", type="number"),\n     *              @OA\\Property(property="foto", type="string"),\n     *              @OA\\Property(property="marca", type="string"),\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=400,\n     *          description="Bad request",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=401,\n     *          description="Unauthorized",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Cerveza not found",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=500,\n     *          description="Internal Server Error",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     * )\n     */\n    public function update(Request $request, $id)\n    {\n        // El c\xf3digo del m\xe9todo permanece sin cambios\n    }\n\n    /**\n     * @OA\\Patch(\n     *      path="/api/v1/cervezas/{id}",\n     *      operationId="patchCerveza",\n     *      tags={"Cervezas"},\n     *      summary="Patch cerveza details by ID",\n     *      description="Partially updates details of a cerveza based on its ID",\n     *      security={{"bearerAuth": {}}},\n     *      @OA\\Parameter(\n     *          name="id",\n     *          description="ID of the cerveza",\n     *          required=true,\n     *          in="path",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Cerveza details to be partially updated",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="nombre", type="string"),\n     *              @OA\\Property(property="descripcion", type="string"),\n     *              @OA\\Property(property="color_id", type="integer"),\n     *              @OA\\Property(property="graduacion_id", type="integer"),\n     *              @OA\\Property(property="tipo_id", type="integer"),\n     *              @OA\\Property(property="pais_id", type="integer"),\n     *              @OA\\Property(property="novedad", type="boolean"),\n     *              @OA\\Property(property="oferta", type="boolean"),\n     *              @OA\\Property(property="precio", type="number"),\n     *              @OA\\Property(property="foto", type="string"),\n     *              @OA\\Property(property="marca", type="string"),\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Successful operation",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="id", type="integer"),\n     *              @OA\\Property(property="nombre", type="string"),\n     *              @OA\\Property(property="descripcion", type="string"),\n     *              @OA\\Property(property="color_id", type="integer"),\n     *              @OA\\Property(property="graduacion_id", type="integer"),\n     *              @OA\\Property(property="tipo_id", type="integer"),\n     *              @OA\\Property(property="pais_id", type="integer"),\n     *              @OA\\Property(property="novedad", type="boolean"),\n     *              @OA\\Property(property="oferta", type="boolean"),\n     *              @OA\\Property(property="precio", type="number"),\n     *              @OA\\Property(property="foto", type="string"),\n     *              @OA\\Property(property="marca", type="string"),\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=400,\n     *          description="Bad request",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=401,\n     *          description="Unauthorized",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Cerveza not found",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=500,\n     *          description="Internal Server Error",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string")\n     *          )\n     *      ),\n     * )\n     */\n    public function patch(Request $request, $id)\n    {\n        // Comenzar una transacci\xf3n de base de datos\n        DB::beginTransaction();\n\n        try {\n            // Encuentra la cerveza que deseas actualizar\n            $cerveza = Cerveza::find($id);\n\n            if (!$cerveza) {\n                DB::rollback();\n                return response()->json(\'La cerveza con ID \' . $id . \' no existe\', 404);\n            }\n\n            // Valida la existencia de valores relacionados (por ejemplo, color, graduaci\xf3n, pa\xeds, tipo)\n            // ...\n\n            // Actualiza los campos de la cerveza solo si est\xe1n presentes en la solicitud\n            // Actualiza los campos de la cerveza solo si est\xe1n presentes en la solicitud\n\n            $cerveza->nombre = $request->json(\'nombre\', $cerveza->nombre);\n            $cerveza->descripcion = $request->json(\'descripcion\', $cerveza->descripcion);\n            $cerveza->color_id = $request->json(\'color_id\', $cerveza->color_id);\n            $cerveza->graduacion_id = $request->json(\'graduacion_id\', $cerveza->graduacion_id);\n            $cerveza->tipo_id = $request->json(\'tipo_id\', $cerveza->tipo_id);\n            $cerveza->pais_id = $request->json(\'pais_id\', $cerveza->pais_id);\n            $cerveza->novedad = $request->json(\'novedad\', $cerveza->novedad);\n            $cerveza->oferta = $request->json(\'oferta\', $cerveza->oferta);\n            $cerveza->precio = $request->json(\'precio\', $cerveza->precio);\n            $cerveza->marca = $request->json(\'marca\', $cerveza->marca);\n\n            // Guarda la cerveza\n            $cerveza->save();\n\n\n            // Guarda la cerveza\n            $cerveza->save();\n\n            // Actualiza la imagen si se proporciona una nueva\n            if ($request->hasFile(\'foto\')) {\n                $path = $request->file(\'foto\')->store(\'/public/images\');\n                $url = url(\'/\') . \'/storage/images/\' . basename($path);\n                $cerveza->foto = $url;\n                $cerveza->save();\n            }\n\n            // Confirmar la transacci\xf3n si todo se complet\xf3 con \xe9xito\n            DB::commit();\n\n            return response()->json($cerveza, 200); // Devuelve la cerveza actualizada\n        } catch (Exception $e) {\n            // Revertir la transacci\xf3n en caso de fallo\n            DB::rollback();\n\n            // Devuelve una respuesta de error\n            return response()->json(\'Error al procesar la solicitud\', 500);\n        }\n    }\n\n\n    /**\n * @OA\\Delete(\n *      path="/api/v1/cervezas/{id}",\n *      operationId="deleteCerveza",\n *      tags={"Cervezas"},\n *      summary="Delete a cerveza by ID",\n *      description="Deletes a cerveza based on its ID",\n *      security={{"bearerAuth": {}}},\n *      @OA\\Parameter(\n *          name="id",\n *          description="ID of the cerveza",\n *          required=true,\n *          in="path",\n *          @OA\\Schema(type="string")\n *      ),\n *      @OA\\Response(\n *          response=200,\n *          description="Successful operation",\n *          @OA\\JsonContent(\n *              @OA\\Property(property="message", type="string")\n *          )\n *      ),\n *      @OA\\Response(\n *          response=404,\n *          description="Cerveza not found",\n *          @OA\\JsonContent(\n *              @OA\\Property(property="message", type="string")\n *          )\n *      ),\n *      @OA\\Response(\n *          response=500,\n *          description="Internal Server Error",\n *          @OA\\JsonContent(\n *              @OA\\Property(property="message", type="string")\n *          )\n *      ),\n * )\n */\n\n    public function destroy(string $id)\n    {\n        // Comienza una transacci\xf3n de base de datos\n        DB::beginTransaction();\n\n        try {\n            // Encuentra el modelo que deseas eliminar\n            $cerveza = Cerveza::find($id);\n\n            if (!$cerveza) {\n                DB::rollback();\n                return response()->json(\'El recurso con ID \' . $id . \' no existe\', 404);\n            }\n\n            // Elimina la imagen asociada si existe\n            if (!empty($cerveza->foto)) {\n                Storage::delete(\'public/images/\' . basename($cerveza->foto));\n            }\n\n            // Elimina el modelo\n            $cerveza->delete();\n\n            // Confirmar la transacci\xf3n si todo se complet\xf3 con \xe9xito\n            DB::commit();\n\n            return response()->json(\'Recurso eliminado correctamente\', 200);\n        } catch (Exception $e) {\n            // Revertir la transacci\xf3n en caso de fallo\n            DB::rollback();\n\n            // Devuelve una respuesta de error\n            return response()->json(\'Error al procesar la solicitud\', 500);\n        }\n    }\n}\n')),(0,t.kt)("h2",{id:"colorcontroller"},"ColorController"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Color; // Aseg\xfarate de importar el modelo Color\nuse Illuminate\\Support\\Facades\\Validator;\n\n \nclass ColorController extends Controller\n{\n \n    public function __construct()\n    {\n        $this->middleware(\'auth:api\')->only([\'store\', \'destroy\', \'update\']);\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * M\xe9todo: index\n     * Ruta asociada: GET /colors\n     * Descripci\xf3n: Este m\xe9todo muestra una lista de recursos (en este caso, colores).\n     */\n    /**\n     * @OA\\Get(\n     *      path="/api/v1/colores",\n     *      operationId="getColores",\n     *      tags={"Colores"},\n     *      summary="Obtener todos los colores",\n     *      description="Recupera todos los colores de la base de datos y los devuelve como una respuesta JSON",\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Lista de colores",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="colores", type="array",\n     *                  @OA\\Items(\n     *                      @OA\\Property(property="id", type="integer", example=1),\n     *                      @OA\\Property(property="nombre", type="string", example="Rojo"),\n     *                      @OA\\Property(property="codigo", type="string", example="#FF0000"),\n     *                  ),\n     *              ),\n     *          ),\n     *      ),\n     * )\n     */\n\n    public function index()\n    {\n        // Recupera todos los colores desde la base de datos y los devuelve como una respuesta JSON\n        $colores = Color::all();\n        return response()->json([\'colores\' => $colores]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * M\xe9todo: create\n     * Ruta asociada: GET /colors/create\n     * Descripci\xf3n: Este m\xe9todo muestra el formulario para crear un nuevo recurso (color).\n     */\n    /**\n     * @OA\\Post(\n     *      path="/api/v1/colores",\n     *      operationId="createColor",\n     *      tags={"Colores"},\n     *      summary="Crear un nuevo color",\n     *      description="Crea un nuevo color utilizando los datos proporcionados en la solicitud y lo devuelve como una respuesta JSON",\n     *      security={{"bearerAuth": {}}},\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Datos del nuevo color",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="nombre", type="string", example="Azul"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=201,\n     *          description="Color creado con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Color creado con \xe9xito"),\n     *              @OA\\Property(property="color", type="object",\n     *                  @OA\\Property(property="id", type="integer", example=2),\n     *                  @OA\\Property(property="nombre", type="string", example="Azul"),\n     *                  @OA\\Property(property="created_at", type="string", format="date-time"),\n     *                  @OA\\Property(property="updated_at", type="string", format="date-time"),\n     *              ),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=422,\n     *          description="Error de validaci\xf3n",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Los datos proporcionados no son v\xe1lidos"),\n     *              @OA\\Property(property="errors", type="object",\n     *                  @OA\\Property(property="nombre", type="array", @OA\\Items(type="string")),\n     *              ),\n     *          ),\n     *      ),\n     * )\n     */\n\n    public function store(Request $request)\n    {\n        // Validaci\xf3n de los datos del nuevo color (por ejemplo, nombre, c\xf3digo de color).\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:255|unique:colores\'\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        //Debe estar configurado fillable en el modelo para \n        //utilizar inserci\xf3n masiva\n\n        $color = Color::create($request->all());\n\n        // Retornar una respuesta JSON que confirma la creaci\xf3n exitosa del color.\n        return response()->json([\'message\' => \'Color creado con \xe9xito\', \'color\' => $color], 201);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * M\xe9todo: show\n     * Ruta asociada: GET /colors/{id}\n     * Descripci\xf3n: Este m\xe9todo muestra un recurso (color) espec\xedfico identificado por su ID.\n     */\n    public function show(string $id)\n    {\n        // Buscar el color por su ID en la base de datos y retornarlo como una respuesta JSON.\n        $color = Color::find($id);\n\n        if (!$color) {\n            return response()->json([\'message\' => \'Color no encontrado\'], 404);\n        }\n\n\n        return response()->json([\'color\' => $color]);\n    }\n\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * M\xe9todo: update\n     * Ruta asociada: PUT/PATCH /colors/{id}\n     * Descripci\xf3n: Este m\xe9todo actualiza un recurso (color) espec\xedfico identificado por su ID en el almacenamiento.\n     */\n    /**\n     * @OA\\Put(\n     *      path="/api/v1/colores/{id}",\n     *      operationId="updateColor",\n     *      tags={"Colores"},\n     *      summary="Actualizar un color existente",\n     *      description="Actualiza un color existente utilizando los datos proporcionados en la solicitud y lo devuelve como una respuesta JSON",\n     *      security={{"bearerAuth": {}}},\n     *      @OA\\Parameter(\n     *          name="id",\n     *          description="ID del color a actualizar",\n     *          required=true,\n     *          in="path",\n     *          @OA\\Schema(type="string"),\n     *      ),\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Datos actualizados del color",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="nombre", type="string", example="Verde"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Color actualizado con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Color actualizado con \xe9xito"),\n     *              @OA\\Property(property="color", type="object",\n     *                  @OA\\Property(property="id", type="integer", example=2),\n     *                  @OA\\Property(property="nombre", type="string", example="Verde"),\n     *                  @OA\\Property(property="created_at", type="string", format="date-time"),\n     *                  @OA\\Property(property="updated_at", type="string", format="date-time"),\n     *              ),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Color no encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Color no encontrado"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=422,\n     *          description="Error de validaci\xf3n",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Los datos proporcionados no son v\xe1lidos"),\n     *              @OA\\Property(property="errors", type="object",\n     *                  @OA\\Property(property="nombre", type="array", @OA\\Items(type="string")),\n     *              ),\n     *          ),\n     *      ),\n     * )\n     */\n\n    public function update(Request $request, string $id)\n    {\n        // Validaci\xf3n de los datos actualizados del color.\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:255|unique:colores\'\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json([\'message\' => \'Los datos proporcionados no son v\xe1lidos\', \'errors\' => $validator->errors()], 422);\n        }\n\n        // Buscar el color por su ID en la base de datos.\n        $color = Color::find($id);\n\n        if (!$color) {\n            return response()->json([\'message\' => \'Color no encontrado\'], 404);\n        }\n\n        // Actualizar los datos del color con los datos validados.\n        $color->update($request->all());\n\n        // Retornar una respuesta JSON que confirma la actualizaci\xf3n exitosa del color.\n        return response()->json([\'message\' => \'Color actualizado con \xe9xito\', \'color\' => $color]);\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * M\xe9todo: destroy\n     * Ruta asociada: DELETE /colors/{id}\n     * Descripci\xf3n: Este m\xe9todo elimina un recurso (color) espec\xedfico identificado por su ID del almacenamiento.\n     */\n    /**\n     * @OA\\Delete(\n     *      path="/api/v1/colores/{id}",\n     *      operationId="deleteColor",\n     *      tags={"Colores"},\n     *      summary="Eliminar un color existente",\n     *      description="Elimina un color existente por su ID y lo devuelve como una respuesta JSON",\n     *      security={{"bearerAuth": {}}},\n     *      @OA\\Parameter(\n     *          name="id",\n     *          description="ID del color a eliminar",\n     *          required=true,\n     *          in="path",\n     *          @OA\\Schema(type="string"),\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Color eliminado con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Color eliminado con \xe9xito"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Color no encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Color no encontrado"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=400,\n     *          description="No se pudo borrar el color, tiene cervezas relacionadas",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="No se pudo borrar el color, tiene cervezas relacionadas"),\n     *          ),\n     *      ),\n     * )\n     */\n\n    public function destroy(string $id)\n    {\n        // Buscar el color por su ID en la base de datos.\n        $color = Color::find($id);\n\n        if (!$color) {\n            return response()->json([\'message\' => \'Color no encontrado\'], 404);\n        }\n\n        if ($color->cervezas()->exists()) {\n            return response()->json([\'message\' => \'No se pudo borrar el color, tiene cervezas relacionadas\'], 400);\n        }\n\n        // Eliminar el color de la base de datos.\n        $color->delete();\n\n        // Retornar una respuesta JSON que confirma la eliminaci\xf3n exitosa del color.\n        return response()->json([\'message\' => \'Color eliminado con \xe9xito\']);\n    }\n}\n')),(0,t.kt)("h2",{id:"graduacioncontroller"},"GraduacionController"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Graduacion;\nuse Illuminate\\Support\\Facades\\Validator;\n\n\n/**\n * @OA\\Schema(\n *     schema="Graduacion",\n *     type="object",\n *     title="Graduacion",\n *     properties={\n *         @OA\\Property(property="id", type="integer", format="int64"),\n *         @OA\\Property(property="nombre", type="string"),\n *     }\n * )\n */\n\n\nclass GraduacionController extends Controller\n{\n\n    public function __construct()\n    {\n        $this->middleware(\'auth:api\')->only([\'store\', \'destroy\', \'update\']);\n    }\n    /**\n     * Display a listing of the resource.\n     *\n     * M\xe9todo: index\n     * Ruta asociada: GET /tipos\n     * Descripci\xf3n: Este m\xe9todo muestra una lista de recursos (en este caso, tipoes).\n     */\n\n    /**\n     * @OA\\Get(\n     *      path="/api/v1/graduaciones",\n     *      operationId="getGraduaciones",\n     *      tags={"Graduaciones"},\n     *      summary="Obtener todas las graduaciones",\n     *      description="Recupera todas las graduaciones desde la base de datos y las retorna como una respuesta JSON.",\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Lista de graduaciones",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="graduaciones", type="array", @OA\\Items(ref="#/components/schemas/Graduacion")),\n     *          ),\n     *      ),\n     * )\n     */\n\n\n    public function index()\n    {\n        // Recuperar todos los tipos desde la base de datos y retornarlos como una respuesta JSON\n        $graduaciones = Graduacion::all();\n        return response()->json([\'graduaciones\' => $graduaciones]);\n    }\n\n\n    /**\n     * @OA\\Post(\n     *      path="/api/v1/graduaciones",\n     *      operationId="storeGraduacion",\n     *      summary="Crear una nueva graduaci\xf3n",\n     *      tags={"Graduaciones"},\n     *      description="Crea una nueva graduaci\xf3n con los datos proporcionados en la solicitud y la retorna como una respuesta JSON.",\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Datos de la nueva graduaci\xf3n",\n     *          @OA\\JsonContent(\n     *              required={"nombre"},\n     *              @OA\\Property(property="nombre", type="string", maxLength=150, description="Nombre de la nueva graduaci\xf3n"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=201,\n     *          description="Graduaci\xf3n creada con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Graduaci\xf3n creado con \xe9xito"),\n     *              @OA\\Property(property="graduacion", type="object", ref="#/components/schemas/Graduacion"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=422,\n     *          description="Error de validaci\xf3n",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="El nombre ya est\xe1 en uso."),\n     *          ),\n     *      ),\n     *      security={{"bearerAuth": {}}}\n     * )\n     */\n    public function store(Request $request)\n    {\n        // Validaci\xf3n de los datos del nuevo tipo (por ejemplo, nombre, c\xf3digo de tipo).\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:150|unique:graduaciones\'\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        //Debe estar configurado fillable en el modelo para \n        //utilizar inserci\xf3n masiva\n        $graduacion = Graduacion::create($request->all());\n\n        // Retornar una respuesta JSON que confirma la creaci\xf3n exitosa del tipo.\n        return response()->json([\'message\' => \'Graduaci\xf3n creada con \xe9xito\', \'graduacion\' => $graduacion], 201);\n    }\n\n    /**\n     * @OA\\Get(\n     *      path="/api/v1/graduaciones/{id}",\n     *      operationId="getGraduacionById",\n     *      tags={"Graduaciones"},\n     *      summary="Obtener informaci\xf3n de una graduaci\xf3n espec\xedfica",\n     *      description="Recupera la informaci\xf3n de una graduaci\xf3n espec\xedfica identificada por su ID y la retorna como una respuesta JSON.",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          required=true,\n     *          in="path",\n     *          description="ID de la graduaci\xf3n",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Informaci\xf3n de la graduaci\xf3n",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="Graduacion", ref="#/components/schemas/Graduacion"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Graduaci\xf3n no encontrada",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Graduaci\xf3n no encontrado"),\n     *          ),\n     *      ),\n     * )\n     */\n\n    public function show(string $id)\n    {\n        // Buscar el tipo por su ID en la base de datos y retornarlo como una respuesta JSON.\n        $graduacion = Graduacion::find($id);\n\n        if (!$graduacion) {\n            return response()->json([\'message\' => \'Graduaci\xf3n no encontrado\'], 404);\n        }\n\n\n        return response()->json([\'Graducaci\xf3n\' => $graduacion]);\n    }\n\n    /**\n     * @OA\\Put(\n     *      path="/api/v1/graduaciones/{id}",\n     *      operationId="updateGraduacion",\n     *      tags={"Graduaciones"},\n     *      summary="Actualizar una graduaci\xf3n existente",\n     *      description="Actualiza una graduaci\xf3n existente identificada por su ID con los datos proporcionados en la solicitud y la retorna como una respuesta JSON.",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          required=true,\n     *          in="path",\n     *          description="ID de la graduaci\xf3n a actualizar",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Datos actualizados de la graduaci\xf3n",\n     *          @OA\\JsonContent(\n     *              required={"nombre"},\n     *              @OA\\Property(property="nombre", type="string", maxLength=150, description="Nuevo nombre de la graduaci\xf3n"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Graduaci\xf3n actualizada con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Graduaci\xf3n actualizado con \xe9xito"),\n     *              @OA\\Property(property="graduacion", ref="#/components/schemas/Graduacion"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Graduaci\xf3n no encontrada",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Graduaci\xf3n no encontrado"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=422,\n     *          description="Error de validaci\xf3n",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="El nombre ya est\xe1 en uso."),\n     *          ),\n     *      ),\n     *      security={{"bearerAuth": {}}}\n     * )\n     */\n\n    public function update(Request $request, string $id)\n    {\n        // Validaci\xf3n de los datos actualizados del tipo.\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:150|unique:graduaciones\'\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n\n        // Buscar el tipo por su ID en la base de datos.\n        $graduacion = Graduacion::find($id);\n\n        if (!$graduacion) {\n            return response()->json([\'message\' => \'graduaci\xf3n no encontrada\'], 404);\n        }\n\n        // Actualizar los datos del tipo con los datos validados.\n        $graduacion->update($request->all());\n\n        // Retornar una respuesta JSON que confirma la actualizaci\xf3n exitosa del tipo.\n        return response()->json([\'message\' => \'Graduaci\xf3n actualizado con \xe9xito\', \'graduacion\' => $graduacion]);\n    }\n\n    /**\n     * @OA\\Delete(\n     *      path="/api/v1/graduaciones/{id}",\n     *      operationId="destroyGraduacion",\n     *      tags={"Graduaciones"},\n     *      summary="Eliminar una graduaci\xf3n existente",\n     *      description="Elimina una graduaci\xf3n existente identificada por su ID y la retorna como una respuesta JSON.",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          required=true,\n     *          in="path",\n     *          description="ID de la graduaci\xf3n a eliminar",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Graduaci\xf3n eliminada con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Graduaci\xf3n eliminado con \xe9xito"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Graduaci\xf3n no encontrada",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Graduaci\xf3n no encontrado"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=400,\n     *          description="No se pudo borrar la graduaci\xf3n, tiene cervezas relacionadas",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="No se pudo borrar la graduaci\xf3n, tiene cervezas relacionadas"),\n     *          ),\n     *      ),\n     *      security={{"bearerAuth": {}}}\n     * )\n     */\n\n    public function destroy(string $id)\n    {\n        // Buscar el tipo por su ID en la base de datos.\n\n        $graduacion = Graduacion::find($id);\n\n        if (!$graduacion) {\n            return response()->json([\'message\' => \'Graduaci\xf3n no encontrada\'], 404);\n        }\n\n        if ($graduacion->cervezas()->exists()) {\n            return response()->json([\'message\' => \'No se pudo borrar la graduaci\xf3n, tiene cervezas relacionadas\'], 400);\n        }\n\n        // Eliminar el tipo de la base de datos.\n        $graduacion->delete();\n\n        // Retornar una respuesta JSON que confirma la eliminaci\xf3n exitosa del tipo.\n        return response()->json([\'message\' => \'Graduaci\xf3n eliminado con \xe9xito\']);\n    }\n}\n')),(0,t.kt)("h2",{id:"paiscontroller"},"PaisController"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'<<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Pais;\nuse Illuminate\\Support\\Facades\\Validator;\n\n/**\n * @OA\\Schema(\n *     schema="Pais",\n *     type="object",\n *     title="Paises",\n *     properties={\n *         @OA\\Property(property="id", type="integer", format="int64"),\n *         @OA\\Property(property="nombre", type="string"),\n *     }\n * )\n */\n\nclass PaisController extends Controller\n{\n\n    public function __construct()\n    {\n        $this->middleware(\'auth:api\')->only([\'store\', \'destroy\', \'update\']);\n    }\n\n    /**\n     * @OA\\Get(\n     *      path="/api/v1/paises",\n     *      operationId="indexPais",\n     *      tags={"Paises"},\n     *      summary="Listar todos los pa\xedses",\n     *      description="Muestra una lista de todos los pa\xedses en una respuesta JSON.",\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Lista de pa\xedses",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="paises", type="array", @OA\\Items(ref="#/components/schemas/Pais")),\n     *          ),\n     *      ),\n     * )\n     */\n\n    public function index()\n    {\n        // Recuperar todos los paises desde la base de datos y retornarlos como una respuesta JSON\n        $paises = Pais::all();\n        return response()->json([\'paises\' => $paises]);\n    }\n\n    /**\n     * @OA\\Post(\n     *      path="/api/v1/paises",\n     *      operationId="storePais",\n     *      tags={"Paises"},\n     *      summary="Crear un nuevo pa\xeds",\n     *      description="Crea un nuevo pa\xeds con los datos proporcionados en la solicitud y lo retorna como una respuesta JSON.",\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Datos del nuevo pa\xeds",\n     *          @OA\\JsonContent(\n     *              required={"nombre"},\n     *              @OA\\Property(property="nombre", type="string", maxLength=255, description="Nombre del nuevo pa\xeds"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=201,\n     *          description="Pa\xeds creado con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Pa\xeds creado con \xe9xito"),\n     *              @OA\\Property(property="pais", type="object", ref="#/components/schemas/Pais"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=422,\n     *          description="Error de validaci\xf3n",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="El nombre ya est\xe1 en uso."),\n     *          ),\n     *      ),\n     *      security={{"bearerAuth": {}}}\n     * )\n     */\n    public function store(Request $request)\n    {\n        // Validaci\xf3n de los datos del nuevo pais (por ejemplo, nombre, c\xf3digo de pais).\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:255|unique:paises\'\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        //Debe estar configurado fillable en el modelo para \n        //utilizar inserci\xf3n masiva\n        $tipo = Pais::create($request->all());\n\n        // Retornar una respuesta JSON que confirma la creaci\xf3n exitosa del pais.\n        return response()->json([\'message\' => \'Pa\xeds creado con \xe9xito\', \'pais\' => $tipo]);\n    }\n\n    /**\n     * @OA\\Get(\n     *      path="/api/v1/paises/{id}",\n     *      operationId="showPais",\n     *      tags={"Paises"},\n     *      summary="Mostrar un pa\xeds espec\xedfico",\n     *      description="Muestra un pa\xeds espec\xedfico identificado por su ID en una respuesta JSON.",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          required=true,\n     *          in="path",\n     *          description="ID del pa\xeds a mostrar",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Pa\xeds encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="Pa\xeds", type="object", ref="#/components/schemas/Pais"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Pa\xeds no encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Pa\xeds no encontrado"),\n     *          ),\n     *      ),\n     * )\n     */\n\n    public function show(string $id)\n    {\n        // Buscar el pais por su ID en la base de datos y retornarlo como una respuesta JSON.\n        $pais = Pais::find($id);\n\n        if (!$pais) {\n            return response()->json([\'message\' => \'pa\xeds no encontrado\'], 404);\n        }\n\n        return response()->json([\'Pa\xeds\' => $pais]);\n    }\n\n    /**\n     * @OA\\Put(\n     *      path="/api/v1/paises/{id}",\n     *      operationId="updatePais",\n     *      tags={"Paises"},\n     *      summary="Actualizar un pa\xeds existente",\n     *      description="Actualiza un pa\xeds existente identificado por su ID con los datos proporcionados en la solicitud y lo retorna como una respuesta JSON.",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          required=true,\n     *          in="path",\n     *          description="ID del pa\xeds a actualizar",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Datos actualizados del pa\xeds",\n     *          @OA\\JsonContent(\n     *              required={"nombre"},\n     *              @OA\\Property(property="nombre", type="string", maxLength=255, description="Nombre actualizado del pa\xeds"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Pa\xeds actualizado con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Pa\xeds actualizado con \xe9xito"),\n     *              @OA\\Property(property="pais", type="object", ref="#/components/schemas/Pais"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Pa\xeds no encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Pa\xeds no encontrado"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=422,\n     *          description="Error de validaci\xf3n",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="El nombre ya est\xe1 en uso."),\n     *          ),\n     *      ),\n     *      security={{"bearerAuth": {}}}\n     * )\n     */\n\n    public function update(Request $request, string $id)\n    {\n        // Validaci\xf3n de los datos actualizados del tipo.\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:255\'\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n\n        // Buscar el pais por su ID en la base de datos.\n        $pais = Pais::find($id);\n\n        if (!$pais) {\n            return response()->json([\'message\' => \'Pais no encontrado\'], 404);\n        }\n\n        // Actualizar los datos del pais con los datos validados.\n        $pais->update($request->all());\n\n        // Retornar una respuesta JSON que confirma la actualizaci\xf3n exitosa del pais.\n        return response()->json([\'message\' => \'Pa\xeds actualizado con \xe9xito\', \'pais\' => $pais]);\n    }\n\n    /**\n     * @OA\\Delete(\n     *      path="/api/v1/paises/{id}",\n     *      operationId="destroyPais",\n     *      tags={"Paises"},\n     *      summary="Eliminar un pa\xeds existente",\n     *      description="Elimina un pa\xeds existente identificado por su ID y lo retorna como una respuesta JSON.",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          required=true,\n     *          in="path",\n     *          description="ID del pa\xeds a eliminar",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Pa\xeds eliminado con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Pa\xeds eliminado con \xe9xito"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Pa\xeds no encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Pa\xeds no encontrado"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=400,\n     *          description="No se pudo borrar el pa\xeds, tiene cervezas relacionadas",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="No se pudo borrar el pa\xeds, tiene cervezas relacionadas"),\n     *          ),\n     *      ),\n     *      security={{"bearerAuth": {}}}\n     * )\n     */\n\n    public function destroy(string $id)\n    {\n        // Buscar el pais por su ID en la base de datos.\n        $pais = Pais::find($id);\n\n        if (!$pais) {\n            return response()->json([\'message\' => \'Pa\xeds no encontrado\'], 404);\n        }\n\n        if ($pais->cervezas()->exists()) {\n            return response()->json([\'message\' => \'No se pudo borrar el pa\xeds, tiene cervezas relacionadas\'], 400);\n        }\n        // Eliminar el pais de la base de datos.\n        $pais->delete();\n\n        // Retornar una respuesta JSON que confirma la eliminaci\xf3n exitosa del tipo.\n        return response()->json([\'message\' => \'Pa\xeds eliminado con \xe9xito\']);\n    }\n}\n')),(0,t.kt)("h2",{id:"tipocontroller"},"TipoController"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Tipo;\nuse Illuminate\\Support\\Facades\\Validator;\n\n/**\n * @OA\\Schema(\n *     schema="Tipo",\n *     type="object",\n *     title="Tipos",\n *     properties={\n *         @OA\\Property(property="id", type="integer", format="int64"),\n *         @OA\\Property(property="nombre", type="string"),\n *     }\n * )\n */\n\n\n\nclass TipoController extends Controller\n{\n    \n    public function __construct()\n    {\n        $this->middleware(\'auth:api\')->only([\'store\', \'destroy\',\'update\']);\n    }\n    /**\n     * @OA\\Get(\n     *      path="/api/v1/tipos",\n     *      operationId="indexTipo",\n     *      tags={"Tipos"},\n     *      summary="Listar todos los tipos",\n     *      description="Muestra una lista de todos los tipos en una respuesta JSON.",\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Lista de tipos",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="tipos", type="array", @OA\\Items(ref="#/components/schemas/Tipo")),\n     *          ),\n     *      ),\n     * )\n     */\n   \n    public function index()\n    {\n        // Recuperar todos los tipoes desde la base de datos y retornarlos como una respuesta JSON\n        $tipos = Tipo::all();\n        return response()->json([\'tipos\' => $tipos]);\n    }\n\n       /**\n     * @OA\\Post(\n     *      path="/api/v1/tipos",\n     *      operationId="storeTipo",\n     *      tags={"Tipos"},\n     *      summary="Crear un nuevo tipo",\n     *      description="Crea un nuevo tipo con los datos proporcionados en la solicitud y lo retorna como una respuesta JSON.",\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Datos del nuevo tipo",\n     *          @OA\\JsonContent(\n     *              required={"nombre"},\n     *              @OA\\Property(property="nombre", type="string", maxLength=150, description="Nombre del nuevo tipo"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=201,\n     *          description="Tipo creado con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Tipo creado con \xe9xito"),\n     *              @OA\\Property(property="tipo", type="object", ref="#/components/schemas/Tipo"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=422,\n     *          description="Error de validaci\xf3n",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="El nombre ya est\xe1 en uso."),\n     *          ),\n     *      ),\n     *      security={{"bearerAuth": {}}}\n     * )\n     */\n    public function store(Request $request)\n    {\n        // Validaci\xf3n de los datos del nuevo tipo (por ejemplo, nombre, c\xf3digo de tipo).\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:150|unique:tipos\'\n        ]);\n        \n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n\n        //Debe estar configurado fillable en el modelo para \n        //utilizar inserci\xf3n masiva\n        $tipo=Tipo::create($request->all());\n       \n        // Retornar una respuesta JSON que confirma la creaci\xf3n exitosa del tipo.\n        return response()->json([\'message\' => \'Tipo creado con \xe9xito\', \'tipo\' => $tipo]);\n    }\n\n    /**\n     * @OA\\Get(\n     *      path="/api/v1/tipos/{id}",\n     *      operationId="showTipo",\n     *      tags={"Tipos"},\n     *      summary="Mostrar un tipo espec\xedfico",\n     *      description="Muestra un tipo espec\xedfico identificado por su ID en una respuesta JSON.",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          required=true,\n     *          in="path",\n     *          description="ID del tipo a mostrar",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Tipo encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="Tipo", type="object", ref="#/components/schemas/Tipo"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Tipo no encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Tipo no encontrado"),\n     *          ),\n     *      ),\n     * )\n     */\n    public function show(string $id)\n    {\n        // Buscar el tipo por su ID en la base de datos y retornarlo como una respuesta JSON.\n        $tipo = Tipo::find($id);\n\n        if (!$tipo) {\n            return response()->json([\'message\' => \'Tipo no encontrado\'], 404);\n        }\n\n\n        return response()->json([\'Tipo\' => $tipo]);\n    }\n\n    \n   /**\n     * @OA\\Put(\n     *      path="/api/v1/tipos/{id}",\n     *      operationId="updateTipo",\n     *      tags={"Tipos"},\n     *      summary="Actualizar un tipo existente",\n     *      description="Actualiza un tipo existente identificado por su ID con los datos proporcionados en la solicitud y lo retorna como una respuesta JSON.",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          required=true,\n     *          in="path",\n     *          description="ID del tipo a actualizar",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          description="Datos actualizados del tipo",\n     *          @OA\\JsonContent(\n     *              required={"nombre"},\n     *              @OA\\Property(property="nombre", type="string", maxLength=150, description="Nombre actualizado del tipo"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Tipo actualizado con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Tipo actualizado con \xe9xito"),\n     *              @OA\\Property(property="tipo", type="object", ref="#/components/schemas/Tipo"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Tipo no encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Tipo no encontrado"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=422,\n     *          description="Error de validaci\xf3n",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="El nombre ya est\xe1 en uso."),\n     *          ),\n     *      ),\n     *      security={{"bearerAuth": {}}}\n     * )\n     */\n    public function update(Request $request, string $id)\n    {\n        // Validaci\xf3n de los datos actualizados del tipo.\n        $validator = Validator::make($request->all(),[\n            \'nombre\' => \'required|string|max:150|unique:tipos\'\n        ]);\n\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        \n\n        // Buscar el tipo por su ID en la base de datos.\n        $tipo = Tipo::find($id);\n\n        if (!$tipo) {\n            return response()->json([\'message\' => \'tipo no encontrado\'], 404);\n        }\n\n        // Actualizar los datos del tipo con los datos validados.\n        $tipo->update($request->all());\n\n        // Retornar una respuesta JSON que confirma la actualizaci\xf3n exitosa del tipo.\n        return response()->json([\'message\' => \'Tipo actualizado con \xe9xito\', \'tipo\' => $tipo]);\n    }\n\n    /**\n     * @OA\\Delete(\n     *      path="/api/v1/tipos/{id}",\n     *      operationId="destroyTipo",\n     *      tags={"Tipos"},\n     *      summary="Eliminar un tipo existente",\n     *      description="Elimina un tipo existente identificado por su ID y lo retorna como una respuesta JSON.",\n     *      @OA\\Parameter(\n     *          name="id",\n     *          required=true,\n     *          in="path",\n     *          description="ID del tipo a eliminar",\n     *          @OA\\Schema(type="string")\n     *      ),\n     *      @OA\\Response(\n     *          response=200,\n     *          description="Tipo eliminado con \xe9xito",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Tipo eliminado con \xe9xito"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=404,\n     *          description="Tipo no encontrado",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="Tipo no encontrado"),\n     *          ),\n     *      ),\n     *      @OA\\Response(\n     *          response=400,\n     *          description="No se pudo borrar el tipo, tiene cervezas relacionadas",\n     *          @OA\\JsonContent(\n     *              @OA\\Property(property="message", type="string", example="No se pudo borrar el tipo, tiene cervezas relacionadas"),\n     *          ),\n     *      ),\n     *      security={{"bearerAuth": {}}}\n     * )\n     */\n\n    public function destroy(string $id)\n    {\n        // Buscar el tipo por su ID en la base de datos.\n        $tipo = Tipo::find($id);\n\n        if (!$tipo) {\n            return response()->json([\'message\' => \'Tipo no encontrado\'], 404);\n        }\n\n        if ($tipo->cervezas()->exists()) {\n            return response()->json([\'message\' => \'No se pudo borrar el tipo, tiene cervezas relacionadas\'],400);\n        }\n        // Eliminar el tipo de la base de datos.\n        $tipo->delete();\n\n        // Retornar una respuesta JSON que confirma la eliminaci\xf3n exitosa del tipo.\n        return response()->json([\'message\' => \'Tipo eliminado con \xe9xito\']);\n    }\n}\n')))}u.isMDXComponent=!0}}]);