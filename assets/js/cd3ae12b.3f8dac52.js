"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[516],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>g});var r=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var a=r.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},c=function(e){var a=d(e.components);return r.createElement(l.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,o=e.mdxType,t=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||t;return n?r.createElement(g,s(s({ref:a},c),{},{components:n})):r.createElement(g,s({ref:a},c))}));function g(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var t=n.length,s=new Array(t);s[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var d=2;d<t;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6917:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const t={sidebar_position:6},s="Controladores",i={unversionedId:"controladores/controladores",id:"controladores/controladores",title:"Controladores",description:"\xbfQu\xe9 es un controlador?",source:"@site/docs/controladores/controladores.md",sourceDirName:"controladores",slug:"/controladores/",permalink:"/api_cervezas_doc/docs/controladores/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/controladores/controladores.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Conceptos b\xe1sicos",permalink:"/api_cervezas_doc/docs/controladores/conceptos"},next:{title:"Rutas",permalink:"/api_cervezas_doc/docs/controladores/rutas"}},l={},d=[{value:"\xbfQu\xe9 es un controlador?",id:"qu\xe9-es-un-controlador",level:2},{value:"Creaci\xf3n de un controladores REST",id:"creaci\xf3n-de-un-controladores-rest",level:2},{value:"ColorController",id:"colorcontroller",level:3},{value:"TipoController",id:"tipocontroller",level:3},{value:"PaisController",id:"paiscontroller",level:3},{value:"GraduacionController",id:"graduacioncontroller",level:3},{value:"SystemController",id:"systemcontroller",level:3},{value:"Transacciones y subida de archivos",id:"transacciones-y-subida-de-archivos",level:2},{value:"Transacciones en Laravel",id:"transacciones-en-laravel",level:3},{value:"CervezaController",id:"cervezacontroller",level:3},{value:"M\xe9todo Index",id:"m\xe9todo-index",level:3},{value:"M\xe9todo Store",id:"m\xe9todo-store",level:3},{value:"Exploraci\xf3n del M\xe9todo store",id:"exploraci\xf3n-del-m\xe9todo-store",level:3},{value:"<strong>1. Iniciando una Transacci\xf3n de Base de Datos</strong>",id:"1-iniciando-una-transacci\xf3n-de-base-de-datos",level:4},{value:"<strong>2. Definiendo Reglas de Validaci\xf3n</strong>",id:"2-definiendo-reglas-de-validaci\xf3n",level:4},{value:"<strong>3. Realizando la Validaci\xf3n de la Solicitud</strong>",id:"3-realizando-la-validaci\xf3n-de-la-solicitud",level:4},{value:"<strong>4. Validando la Existencia de Valores Relacionados</strong>",id:"4-validando-la-existencia-de-valores-relacionados",level:4},{value:"<strong>5. Procesamiento y Almacenamiento de la Imagen</strong>",id:"5-procesamiento-y-almacenamiento-de-la-imagen",level:4},{value:"<strong>6. Guardando la Cerveza en la Base de Datos</strong>",id:"6-guardando-la-cerveza-en-la-base-de-datos",level:4},{value:"<strong>7. Confirmando la Transacci\xf3n</strong>",id:"7-confirmando-la-transacci\xf3n",level:4},{value:"<strong>8. Respuesta de \xc9xito o Manejo de Errores</strong>",id:"8-respuesta-de-\xe9xito-o-manejo-de-errores",level:4}],c={toc:d},p="wrapper";function u(e){let{components:a,...n}=e;return(0,o.kt)(p,(0,r.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controladores"},"Controladores"),(0,o.kt)("h2",{id:"qu\xe9-es-un-controlador"},"\xbfQu\xe9 es un controlador?"),(0,o.kt)("p",null,"Un ",(0,o.kt)("strong",{parentName:"p"},"controlador")," en Laravel es una clase PHP que se encarga de manejar las solicitudes HTTP y proporcionar una respuesta apropiada. Los controladores se utilizan para agrupar el l\xf3gica de negocios y proporcionar un punto de acceso central para el manejo de solicitudes ",(0,o.kt)("strong",{parentName:"p"},"HTTP"),"."),(0,o.kt)("p",null,"Un controlador puede contener varios m\xe9todos, cada uno de los cuales se ejecutar\xe1 en respuesta a una solicitud HTTP espec\xedfica. Por ejemplo, puedes tener un controlador que maneje las solicitudes para ver, crear, actualizar y eliminar registros de una tabla de la base de datos."),(0,o.kt)("p",null,"Para crear un controlador en Laravel, debes usar el comando php artisan make:controller seguido del nombre del controlador. Por ejemplo, para crear un controlador llamado ",(0,o.kt)("strong",{parentName:"p"},"ProductosController"),", ejecutar\xedas el siguiente comando:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller ProductosController\n")),(0,o.kt)("p",null,"Una vez creado el controlador, puedes agregar m\xe9todos para manejar diferentes solicitudes HTTP. Por ejemplo, puedes tener un m\xe9todo index que muestre una lista de productos y un m\xe9todo store que almacene un nuevo producto en la base de datos."),(0,o.kt)("p",null,"Para hacer una solicitud HTTP a un controlador, debes definir una ruta en el archivo routes/web.php o routes/api.php seg\xfan corresponda que apunte a un m\xe9todo espec\xedfico en el controlador. Por ejemplo, para hacer una solicitud GET a /productos y ejecutar el m\xe9todo index en el controlador ProductosController, podr\xedas agregar la siguiente ruta:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Route::get('/productos', 'ProductosController@index');\n")),(0,o.kt)("p",null,"El controlador es una parte importante de la arquitectura de Laravel y se utiliza para separar la l\xf3gica de negocios de la l\xf3gica de presentaci\xf3n, lo que ayuda a mantener tu aplicaci\xf3n limpia y organizada."),(0,o.kt)("h2",{id:"creaci\xf3n-de-un-controladores-rest"},"Creaci\xf3n de un controladores REST"),(0,o.kt)("h3",{id:"colorcontroller"},"ColorController"),(0,o.kt)("p",null,"Para crear el controlador teclee el siguiente comando en su terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/ColorController --resource\n")),(0,o.kt)("p",null,"La opci\xf3n --resource le indica a la Laravel que cree los m\xe9todos necesarios para crear un CRUD."),(0,o.kt)("p",null,"Dir\xedjase a la carpeta ",(0,o.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo CategoriaController."),(0,o.kt)("p",null,"Seguidamente comentaremos paso a paso los para crear el controlador:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Color; // Aseg\xfarate de importar el modelo Color\nuse Illuminate\\Support\\Facades\\Validator;\n\n\nclass ColorController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * M\xe9todo: index\n     * Ruta asociada: GET /colors\n     * Descripci\xf3n: Este m\xe9todo muestra una lista de recursos (en este caso, colores).\n     */\n    public function index()\n    {\n        // Recuperar todos los colores desde la base de datos y retornarlos como una respuesta JSON\n        $colores = Color::orderBy('nombre')->get;\n        return response()->json(['colores' => $colores]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * M\xe9todo: create\n     * Ruta asociada: GET /colors/create\n     * Descripci\xf3n: Este m\xe9todo muestra el formulario para crear un nuevo recurso (color).\n     */\n\n    public function store(Request $request)\n    {\n        // Validaci\xf3n de los datos del nuevo color (por ejemplo, nombre, c\xf3digo de color).\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:255|unique:colores'\n        ]);\n\n        if($validator->fails()){\n            return response()->json($validator->errors(),422);\n        }\n\n        //Debe estar configurado fillable en el modelo para\n        //utilizar inserci\xf3n masiva\n\n        $color=Color::create($request->all());\n\n        // Retornar una respuesta JSON que confirma la creaci\xf3n exitosa del color.\n        return response()->json(['message' => 'Color creado con \xe9xito', 'color' => $color],201);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * M\xe9todo: show\n     * Ruta asociada: GET /colors/{id}\n     * Descripci\xf3n: Este m\xe9todo muestra un recurso (color) espec\xedfico identificado por su ID.\n     */\n    public function show(string $id)\n    {\n        // Buscar el color por su ID en la base de datos y retornarlo como una respuesta JSON.\n        $color = Color::find($id);\n\n        if (!$color) {\n            return response()->json(['message' => 'Color no encontrado'], 404);\n        }\n\n\n        return response()->json(['color' => $color]);\n    }\n\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * M\xe9todo: update\n     * Ruta asociada: PUT/PATCH /colors/{id}\n     * Descripci\xf3n: Este m\xe9todo actualiza un recurso (color) espec\xedfico identificado por su ID en el almacenamiento.\n     */\n    public function update(Request $request, string $id)\n    {\n        // Validaci\xf3n de los datos actualizados del color.\n        $validator = Validator::make($request->all(),[\n            'nombre' => 'required|string|max:255|unique:colores'\n        ]);\n\n        if($validator->fails()){\n            return response()->json($validator->errors(),422);\n        }\n\n\n        // Buscar el color por su ID en la base de datos.\n        $color = Color::find($id);\n\n        if (!$color) {\n            return response()->json(['message' => 'Color no encontrado'], 404);\n        }\n\n        // Actualizar los datos del color con los datos validados.\n        $color->update($request->all());\n\n        // Retornar una respuesta JSON que confirma la actualizaci\xf3n exitosa del color.\n        return response()->json(['message' => 'Color actualizado con \xe9xito', 'color' => $color]);\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * M\xe9todo: destroy\n     * Ruta asociada: DELETE /colors/{id}\n     * Descripci\xf3n: Este m\xe9todo elimina un recurso (color) espec\xedfico identificado por su ID del almacenamiento.\n     */\n    public function destroy(string $id)\n    {\n        // Buscar el color por su ID en la base de datos.\n        $color = Color::find($id);\n\n        if (!$color) {\n            return response()->json(['message' => 'Color no encontrado'], 404);\n        }\n\n        if ($color->cervezas()->exists()) {\n            return response()->json(['message' => 'No se pudo borrar el color, tiene cervezas relacionadas'],400);\n        }\n        // Eliminar el color de la base de datos.\n        $color->delete();\n\n        // Retornar una respuesta JSON que confirma la eliminaci\xf3n exitosa del color.\n        return response()->json(['message' => 'Color eliminado con \xe9xito']);\n    }\n}\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Hemos a\xf1adido dos clases: Color y la clase Validator.")),(0,o.kt)("admonition",{title:"La clase validator",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"La clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Validator")," en Laravel es una parte fundamental del sistema de validaci\xf3n de datos de Laravel. Proporciona una forma conveniente y poderosa de validar los datos de entrada de una solicitud antes de procesarlos o almacenarlos en la base de datos. Laravel utiliza esta clase para llevar a cabo la validaci\xf3n de datos, y es ampliamente utilizada en controladores, formularios, y en otros lugares donde es necesario garantizar la integridad de los datos."),(0,o.kt)("p",{parentName:"admonition"},"Aqu\xed hay algunas caracter\xedsticas y conceptos clave relacionados con la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Validator")," en Laravel:"),(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Creaci\xf3n de un Validador"),": Puedes crear una instancia de la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Validator")," pasando los datos que deseas validar y las reglas de validaci\xf3n. Las reglas de validaci\xf3n se definen como un array asociativo donde las claves son los nombres de los campos y los valores son las reglas de validaci\xf3n que se deben aplicar."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$validator = Validator::make($data, [\n    'nombre' => 'required|string|max:255',\n    'correo' => 'required|email|unique:users',\n]);\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Reglas de Validaci\xf3n"),": Las reglas de validaci\xf3n son expresiones que especifican c\xf3mo se debe validar un campo. Laravel proporciona una amplia variedad de reglas de validaci\xf3n predefinidas, como 'required', 'numeric', 'email', 'unique', 'max', 'min', entre otras. Tambi\xe9n puedes crear tus propias reglas de validaci\xf3n personalizadas si es necesario.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Mensajes de Error Personalizados"),": Puedes personalizar los mensajes de error para cada regla de validaci\xf3n si deseas proporcionar mensajes m\xe1s descriptivos."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$messages = [\n    'nombre.required' => 'El nombre es obligatorio.',\n    'correo.email' => 'El correo debe ser una direcci\xf3n de correo electr\xf3nico v\xe1lida.',\n];\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Evaluaci\xf3n de Validaci\xf3n"),": Una vez que has creado una instancia del validador, puedes evaluar la validaci\xf3n utilizando el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"validate()"),". Este m\xe9todo devolver\xe1 ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," si la validaci\xf3n es exitosa y lanzar\xe1 una excepci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"ValidationException")," si la validaci\xf3n falla."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},"if ($validator->validate()) {\n    // La validaci\xf3n fue exitosa\n}\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Recuperaci\xf3n de Errores"),": Si la validaci\xf3n falla, puedes recuperar los errores generados por el validador. Esto es \xfatil para mostrar mensajes de error al usuario."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},"if ($validator->fails()) {\n    $errors = $validator->errors();\n    // Puedes acceder a los errores individualmente, por ejemplo: $errors->first('nombre')\n}\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Validaci\xf3n en Controladores"),": La validaci\xf3n se usa com\xfanmente en controladores para garantizar que los datos de entrada cumplan con ciertas reglas antes de procesarlos o almacenarlos en la base de datos. Esto ayuda a mantener la integridad de los datos y a prevenir problemas de seguridad.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Middleware de Validaci\xf3n"),": Laravel tambi\xe9n proporciona middleware de validaci\xf3n que se puede utilizar para validar los datos antes de que lleguen al controlador. Esto es especialmente \xfatil para formularios web y API.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Personalizaci\xf3n de Reglas de Validaci\xf3n"),": Puedes personalizar las reglas de validaci\xf3n y crear reglas personalizadas si tus requisitos son m\xe1s espec\xedficos que las reglas de validaci\xf3n predefinidas.\n:::")))),(0,o.kt)("p",null,"Claro, aqu\xed tienes ejemplos de algunas de las reglas de validaci\xf3n m\xe1s comunes en Laravel:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"required"),": El campo debe estar presente y no puede estar en blanco.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'nombre' => 'required'\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"email"),": El campo debe ser una direcci\xf3n de correo electr\xf3nico v\xe1lida.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'correo' => 'email'\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"numeric"),": El campo debe ser un valor num\xe9rico.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'edad' => 'numeric'\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"alpha"),": El campo debe contener solo letras del alfabeto.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'nombre' => 'alpha'\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"integer"),": El campo debe ser un n\xfamero entero.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'cantidad' => 'integer'\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"min:valor"),': El campo debe tener un valor num\xe9rico mayor o igual que "valor".')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'edad' => 'min:18'\n")),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"max:valor"),': El campo debe tener un valor num\xe9rico menor o igual que "valor".')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'puntaje' => 'max:100'\n")),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"between:min,max"),": El campo debe tener un valor num\xe9rico que est\xe9 dentro del rango especificado.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'nota' => 'between:0,10'\n")),(0,o.kt)("ol",{start:9},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"in:foo,bar,..."),": El campo debe estar en la lista de valores permitidos.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'color' => 'in:rojo,verde,azul'\n")),(0,o.kt)("ol",{start:10},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"not_in:foo,bar,..."),": El campo no debe estar en la lista de valores prohibidos.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'rol' => 'not_in:admin,superadmin'\n")),(0,o.kt)("ol",{start:11},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"date"),": El campo debe ser una fecha v\xe1lida.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'fecha_nacimiento' => 'date'\n")),(0,o.kt)("ol",{start:12},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"before:date"),": El campo debe ser una fecha anterior a la fecha especificada.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'fecha_vencimiento' => 'before:2023-12-31'\n")),(0,o.kt)("ol",{start:13},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"after:date"),": El campo debe ser una fecha posterior a la fecha especificada.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"'fecha_inicio' => 'after:2023-01-01'\n")),(0,o.kt)("p",null,"Estos son solo ejemplos de algunas reglas de validaci\xf3n comunes en Laravel. Puedes combinar varias reglas en una sola validaci\xf3n y personalizar los mensajes de error seg\xfan tus necesidades espec\xedficas. La validaci\xf3n de datos es una parte fundamental de cualquier aplicaci\xf3n web para garantizar la integridad de los datos recibidos.\n:::"),(0,o.kt)("h3",{id:"tipocontroller"},"TipoController"),(0,o.kt)("p",null,"Para crear el controlador teclee el siguiente comando en su terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/TipoController\n")),(0,o.kt)("p",null,"Dir\xedjase al controlador creado, editelo y copie el siguiente c\xf3digo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Tipo;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass TipoController extends Controller\n{\n    \n    public function __construct()\n    {\n        $this->middleware('auth:api')->only(['store', 'destroy']);\n    }\n    public function index(Request $request)\n    {\n        // Recopila par\xe1metros de consulta desde la solicitud\n        $perPage = $request->input('per_page', 40);\n        $page = $request->input('page', 1);\n\n        // Construye una consulta utilizando el Query Builder de Laravel\n        $query = DB::table('tipos as tip')\n            ->select('*')\n            ->orderBy('tip.nombre');\n\n        // Realiza una paginaci\xf3n de los resultados\n        $results = $query->paginate($perPage, ['*'], 'page', $page);\n\n        // Devuelve una respuesta JSON con los resultados paginados\n        return response()->json($results);\n    }\n\n    public function store(Request $request)\n    {\n        // Validaci\xf3n de los datos del nuevo tipo (por ejemplo, nombre, c\xf3digo de tipo).\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:150|unique:tipos'\n        ]);\n        \n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n\n        //Debe estar configurado fillable en el modelo para \n        //utilizar inserci\xf3n masiva\n        $tipo=Tipo::create($request->all());\n       \n        // Retornar una respuesta JSON que confirma la creaci\xf3n exitosa del tipo.\n        return response()->json(['message' => 'Tipo creado con \xe9xito', 'tipo' => $tipo]);\n    }\n\n    public function show(string $id)\n    {\n        // Buscar el tipo por su ID en la base de datos y retornarlo como una respuesta JSON.\n        $tipo = Tipo::find($id);\n\n        if (!$tipo) {\n            return response()->json(['message' => 'Tipo no encontrado'], 404);\n        }\n\n\n        return response()->json(['Tipo' => $tipo]);\n    }\n\n    public function update(Request $request, string $id)\n{\n    // Validaci\xf3n de los datos actualizados del tipo.\n    $validator = Validator::make($request->all(), [\n        'nombre' => 'required|string|max:100',\n        'descripcion' => 'required|string',\n    ]);\n\n    \n    if ($validator->fails()) {\n        return response()->json($validator->errors(), 422);\n    }\n\n    // Buscar el tipo por su ID en la base de datos.\n    $tipo = Tipo::find($id);\n\n    if (!$tipo) {\n        return response()->json(['message' => 'tipo no encontrado'], 404);\n    }\n    \n    $tipo->nombre = $request->input('nombre');\n    $tipo->descripcion = $request->input('descripcion');\n    $tipo->save();\n    // Actualizar los datos del tipo con los datos validados.\n  //  $tipo->update($request->all());\n\n    // Retornar una respuesta JSON que confirma la actualizaci\xf3n exitosa del tipo.\n    return response()->json(['message' => 'Tipo actualizado con \xe9xito', 'tipo' => $tipo]);\n}\n\n    public function destroy(string $id)\n    {\n        // Buscar el tipo por su ID en la base de datos.\n        $tipo = Tipo::find($id);\n\n        if (!$tipo) {\n            return response()->json(['message' => 'Tipo no encontrado'], 404);\n        }\n\n        if ($tipo->cervezas()->exists()) {\n            return response()->json(['message' => 'No se pudo borrar el tipo, tiene cervezas relacionadas'],400);\n        }\n        // Eliminar el tipo de la base de datos.\n        $tipo->delete();\n\n        // Retornar una respuesta JSON que confirma la eliminaci\xf3n exitosa del tipo.\n        return response()->json(['message' => 'Tipo eliminado con \xe9xito']);\n    }\n}\n")),(0,o.kt)("h3",{id:"paiscontroller"},"PaisController"),(0,o.kt)("p",null,"Para crear el controlador teclee el siguiente comando en su terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/PaisController\n")),(0,o.kt)("p",null,"Dir\xedjase al controlador creado, editelo y copie el siguiente c\xf3digo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Pais;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass PaisController extends Controller\n{\n\n    public function __construct()\n    {\n        $this->middleware('auth:api')->only(['store', 'destroy', 'update']);\n    }\n\n\n public function index(Request $request)\n {\n     // Recopila par\xe1metros de consulta desde la solicitud\n     $perPage = $request->input('per_page', 20);\n     $page = $request->input('page', 1);\n \n     // Construye una consulta utilizando el Query Builder de Laravel\n     $query = DB::table('paises as p')\n         ->select('*')\n         ->orderBy('p.nombre');\n \n     // Realiza una paginaci\xf3n de los resultados\n     $results = $query->paginate($perPage, ['*'], 'page', $page);\n \n     // Devuelve una respuesta JSON con los resultados paginados\n     return response()->json($results);\n }\n \n    public function store(Request $request)\n    {\n        // Validaci\xf3n de los datos del nuevo pais (por ejemplo, nombre, c\xf3digo de pais).\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:255|unique:paises'\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        //Debe estar configurado fillable en el modelo para \n        //utilizar inserci\xf3n masiva\n        $tipo = Pais::create($request->all());\n\n        // Retornar una respuesta JSON que confirma la creaci\xf3n exitosa del pais.\n        return response()->json(['message' => 'Pa\xeds creado con \xe9xito', 'pais' => $tipo]);\n    }\n\n\n    public function show(string $id)\n    {\n        // Buscar el pais por su ID en la base de datos y retornarlo como una respuesta JSON.\n        $pais = Pais::find($id);\n\n        if (!$pais) {\n            return response()->json(['message' => 'pa\xeds no encontrado'], 404);\n        }\n\n        return response()->json(['Pa\xeds' => $pais]);\n    }\n\n\n    public function update(Request $request, string $id)\n    {\n        // Validaci\xf3n de los datos actualizados del tipo.\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:255'\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n\n        // Buscar el pais por su ID en la base de datos.\n        $pais = Pais::find($id);\n\n        if (!$pais) {\n            return response()->json(['message' => 'Pais no encontrado'], 404);\n        }\n\n        // Actualizar los datos del pais con los datos validados.\n        $pais->update($request->all());\n\n        // Retornar una respuesta JSON que confirma la actualizaci\xf3n exitosa del pais.\n        return response()->json(['message' => 'Pa\xeds actualizado con \xe9xito', 'pais' => $pais]);\n    }\n\n\n    public function destroy(string $id)\n    {\n        // Buscar el pais por su ID en la base de datos.\n        $pais = Pais::find($id);\n\n        if (!$pais) {\n            return response()->json(['message' => 'Pa\xeds no encontrado'], 404);\n        }\n\n        if ($pais->cervezas()->exists()) {\n            return response()->json(['message' => 'No se pudo borrar el pa\xeds, tiene cervezas relacionadas'], 400);\n        }\n        // Eliminar el pais de la base de datos.\n        $pais->delete();\n\n        // Retornar una respuesta JSON que confirma la eliminaci\xf3n exitosa del tipo.\n        return response()->json(['message' => 'Pa\xeds eliminado con \xe9xito']);\n    }\n}\n\n")),(0,o.kt)("h3",{id:"graduacioncontroller"},"GraduacionController"),(0,o.kt)("p",null,"Para crear el controlador teclee el siguiente comando en su terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/Graduaci\xf3nController\n")),(0,o.kt)("p",null,"Dir\xedjase al controlador creado, editelo y copie el siguiente c\xf3digo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Graduacion;\nuse Illuminate\\Support\\Facades\\Validator;\n\n\nclass GraduacionController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * M\xe9todo: index\n     * Ruta asociada: GET /tipos\n     * Descripci\xf3n: Este m\xe9todo muestra una lista de recursos (en este caso, tipoes).\n     */\n    public function index()\n    {\n        // Recuperar todos los tipoes desde la base de datos y retornarlos como una respuesta JSON\n        $graduaciones = Graduacion::orderBy('nombre')->get();\n        return response()->json(['graduaciones' => $graduaciones]);\n    }\n\n\n    public function store(Request $request)\n    {\n        // Validaci\xf3n de los datos del nuevo tipo (por ejemplo, nombre, c\xf3digo de tipo).\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:150|unique:tipos'\n        ]);\n\n        if($validator->fails()){\n            return response()->json($validator->errors(),422);\n        }\n\n        //Debe estar configurado fillable en el modelo para\n        //utilizar inserci\xf3n masiva\n        $graduacion=Graduacion::create($request->all());\n\n        // Retornar una respuesta JSON que confirma la creaci\xf3n exitosa del tipo.\n        return response()->json(['message' => 'Graduaci\xf3n creado con \xe9xito', 'graduacion' => $graduacion]);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * M\xe9todo: show\n     * Ruta asociada: GET /tipos/{id}\n     * Descripci\xf3n: Este m\xe9todo muestra un recurso (tipo) espec\xedfico identificado por su ID.\n     */\n    public function show(string $id)\n    {\n        // Buscar el tipo por su ID en la base de datos y retornarlo como una respuesta JSON.\n        $graduacion = Graduacion::find($id);\n\n        if (!$graduacion) {\n            return response()->json(['message' => 'Graduaci\xf3n no encontrado'], 404);\n        }\n\n\n        return response()->json(['Tipo' => $graduacion]);\n    }\n\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * M\xe9todo: update\n     * Ruta asociada: PUT/PATCH /itposs/{id}\n     * Descripci\xf3n: Este m\xe9todo actualiza un recurso (tipo) espec\xedfico identificado por su ID en el almacenamiento.\n     */\n    public function update(Request $request, string $id)\n    {\n        // Validaci\xf3n de los datos actualizados del tipo.\n        $validator = Validator::make($request->all(),[\n            'nombre' => 'required|string|max:150|unique:graduaciones'\n        ]);\n\n        if($validator->fails()){\n            return response()->json($validator->errors(),422);\n        }\n\n\n        // Buscar el tipo por su ID en la base de datos.\n        $graduacion = Graduacion::find($id);\n\n        if (!$graduacion) {\n            return response()->json(['message' => 'graduaci\xf3n no encontrada'], 404);\n        }\n\n        // Actualizar los datos del tipo con los datos validados.\n        $graduacion->update($request->all());\n\n        // Retornar una respuesta JSON que confirma la actualizaci\xf3n exitosa del tipo.\n        return response()->json(['message' => 'Graduaci\xf3n actualizado con \xe9xito', 'graduacion' => $graduacion]);\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * M\xe9todo: destroy\n     * Ruta asociada: DELETE /tipos/{id}\n     * Descripci\xf3n: Este m\xe9todo elimina un recurso (tipo) espec\xedfico identificado por su ID del almacenamiento.\n     */\n    public function destroy(string $id)\n    {\n        // Buscar el tipo por su ID en la base de datos.\n\n        $graduacion = Graduacion::find($id);\n\n        if (!$graduacion) {\n            return response()->json(['message' => 'Graduaci\xf3n no encontrada'], 404);\n        }\n\n        if ($graduacion->cervezas()->exists()) {\n            return response()->json(['message' => 'No se pudo borrar la graduaci\xf3n, tiene cervezas relacionadas'],400);\n        }\n\n\n        // Eliminar el tipo de la base de datos.\n        $graduacion->delete();\n\n        // Retornar una respuesta JSON que confirma la eliminaci\xf3n exitosa del tipo.\n        return response()->json(['message' => 'Graduaci\xf3n eliminado con \xe9xito']);\n    }\n}\n")),(0,o.kt)("h3",{id:"systemcontroller"},"SystemController"),(0,o.kt)("p",null,"Para crear el controlador teclee el siguiente comando en su terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/SystemController\n")),(0,o.kt)("p",null,"Dir\xedjase al controlador creado, editelo y copie el siguiente c\xf3digo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass SystemController extends Controller\n{\n    public function consultaCervezasPorPais()\n    {\n        $resultados = DB::select(\"\n            SELECT COUNT(*) as value, p.nombre as name\n            FROM cervezas as cer\n            INNER JOIN paises AS p ON cer.pais_id = p.id\n            GROUP BY cer.pais_id, p.nombre\n            ORDER BY p.nombre\n        \");\n\n        return response()->json($resultados);\n    }\n\n  \n    public function consultaCervezasPorTipo()\n    {\n        $resultados = DB::select(\"\n            SELECT COUNT(*) as value, t.nombre as name\n            FROM cervezas as cer\n            INNER JOIN tipos AS t ON cer.tipo_id = t.id\n            GROUP BY cer.tipo_id, t.nombre\n            ORDER BY t.nombre\n        \");\n\n        return response()->json($resultados);\n    }\n\n \n    public function consultaBD()\n    {\n        $databaseName = env('DB_DATABASE');\n        $resultados = DB::select(\"\n            SELECT \n            table_name,\n            table_rows,\n            data_length / (1024 * 1024) AS data_size_mb,\n            index_length / (1024 * 1024) AS index_size_mb\n            FROM information_schema.tables\n            WHERE table_schema = '{$databaseName}'\n            AND table_type = 'BASE TABLE'; -- Solo tablas, no vistas ni tablas de sistema;\n        \");\n\n        return response()->json($resultados);\n    }\n\n \n    public function consultaTablas()\n    {\n        $databaseName = env('DB_DATABASE');\n    \n        $resultados = DB::select(\"\n            SELECT table_name, table_rows\n            FROM information_schema.tables\n            WHERE table_schema = '{$databaseName}'\n              AND table_type = 'BASE TABLE'; -- Solo tablas, no vistas ni tablas de sistema\n        \");\n    \n        return response()->json($resultados);\n    }\n    \n};\n")),(0,o.kt)("h2",{id:"transacciones-y-subida-de-archivos"},"Transacciones y subida de archivos"),(0,o.kt)("p",null,"En el controlador CervezaController estudiaremos y experimentaremos con conceptos fundamentales relacionados con nuestros controladores."),(0,o.kt)("admonition",{title:"\xbfQu\xe8 es una transacci\xf3n?",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Una transacci\xf3n en bases de datos es una secuencia de operaciones que se ejecutan como una \xfanica unidad l\xf3gica e indivisible. Estas operaciones pueden ser tanto lecturas como escrituras en la base de datos. La idea fundamental detr\xe1s de las transacciones es garantizar la consistencia y la integridad de los datos, incluso en el caso de fallos o errores."),(0,o.kt)("p",{parentName:"admonition"},"Aqu\xed hay algunos conceptos clave relacionados con las transacciones en bases de datos:"),(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Atomicidad:")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Una transacci\xf3n se considera at\xf3mica, lo que significa que todas sus operaciones se realizan como una sola unidad."),(0,o.kt)("li",{parentName:"ul"},"Si alguna parte de la transacci\xf3n falla, todas las operaciones realizadas hasta ese punto se deshacen, y la base de datos vuelve a su estado anterior a la transacci\xf3n."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Consistencia:")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"La consistencia asegura que una transacci\xf3n lleve la base de datos desde un estado v\xe1lido a otro estado v\xe1lido."),(0,o.kt)("li",{parentName:"ul"},"Las reglas y restricciones de la base de datos deben mantenerse despu\xe9s de cada transacci\xf3n."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Aislamiento:")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Cada transacci\xf3n se ejecuta de manera aislada de otras transacciones concurrentes."),(0,o.kt)("li",{parentName:"ul"},"Este concepto ayuda a evitar que los resultados de una transacci\xf3n sean visibles para otras transacciones hasta que se complete."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Durabilidad:")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"La durabilidad garantiza que una vez que una transacci\xf3n se ha completado correctamente, sus efectos persistir\xe1n incluso en caso de fallo del sistema o reinicio."),(0,o.kt)("li",{parentName:"ul"},"Los cambios realizados por una transacci\xf3n se guardan de manera permanente en la base de datos.")))),(0,o.kt)("p",{parentName:"admonition"},"Ejemplo de uso de transacciones en SQL:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"BEGIN TRANSACTION;\n\n-- Operaciones de la transacci\xf3n (INSERT, UPDATE, DELETE, etc.)\n\n-- Si todo est\xe1 bien, se confirma la transacci\xf3n\nCOMMIT;\n\n-- Si hay alg\xfan problema, se deshacen las operaciones\nROLLBACK;\n")),(0,o.kt)("p",{parentName:"admonition"},"Las transacciones son esenciales para mantener la integridad de los datos en sistemas de bases de datos, especialmente en entornos donde m\xfaltiples operaciones pueden ocurrir simult\xe1neamente. La implementaci\xf3n adecuada de transacciones contribuye a la confiabilidad y la consistencia de las operaciones en una base de datos.")),(0,o.kt)("h3",{id:"transacciones-en-laravel"},"Transacciones en Laravel"),(0,o.kt)("p",null,"En Laravel, puedes gestionar transacciones de base de datos de manera bastante sencilla utilizando las funciones proporcionadas por Eloquent, el ORM (Object-Relational Mapping) integrado en el framework. Aqu\xed hay un ejemplo b\xe1sico de c\xf3mo puedes trabajar con transacciones en Laravel:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"use App\\Models\\TuModelo;\n\n// Iniciar una transacci\xf3n\nDB::beginTransaction();\n\ntry {\n    // Realizar operaciones de base de datos\n    TuModelo::create(['campo' => 'valor']);\n    OtroModelo::where('condicion', 'valor')->update(['campo' => 'nuevo_valor']);\n\n    // Confirmar la transacci\xf3n si todo est\xe1 bien\n    DB::commit();\n} catch (\\Exception $e) {\n    // Deshacer la transacci\xf3n en caso de error\n    DB::rollBack();\n\n    // Manejar el error de alguna manera (registros de errores, mensajes, etc.)\n    // Puedes acceder al mensaje de error usando $e->getMessage()\n}\n")),(0,o.kt)("p",null,"En este ejemplo:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"DB::beginTransaction()"),":")," Inicia la transacci\xf3n.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Operaciones de base de datos:")," Realiza las operaciones de base de datos dentro del bloque ",(0,o.kt)("inlineCode",{parentName:"p"},"try"),". Si alguna de estas operaciones falla (lanza una excepci\xf3n), el bloque ",(0,o.kt)("inlineCode",{parentName:"p"},"catch")," se ejecutar\xe1.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"DB::commit()"),":")," Confirma la transacci\xf3n si todas las operaciones fueron exitosas. Esto guarda los cambios permanentemente en la base de datos.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"DB::rollBack()"),":")," Si alguna operaci\xf3n falla, deshace la transacci\xf3n para que no se apliquen los cambios incorrectos. Esto asegura la integridad de la base de datos."))),(0,o.kt)("p",null,"Es fundamental utilizar bloques ",(0,o.kt)("inlineCode",{parentName:"p"},"try-catch")," para capturar cualquier excepci\xf3n que se produzca durante la transacci\xf3n y garantizar que se realice un rollback si algo sale mal."),(0,o.kt)("p",null,"Este enfoque es muy \xfatil cuando necesitas garantizar que varias operaciones en la base de datos se realicen de manera at\xf3mica. La transacci\xf3n asegura que todas las operaciones se completen correctamente o que no tengan ning\xfan efecto en la base de datos si algo falla."),(0,o.kt)("h3",{id:"cervezacontroller"},"CervezaController"),(0,o.kt)("p",null,"Para crear el controlador teclee el siguiente comando en su terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/CervezaController\n")),(0,o.kt)("p",null,"Dir\xedjase a la carpeta ",(0,o.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo TipoController."),(0,o.kt)("p",null,"Seguidamente comentaremos paso a paso los para crear el controlador:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"De momento teclee el siguiente c\xf3digo")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Validator;\nuse App\\Models\\Cerveza;\nuse App\\Models\\Color;\nuse App\\Models\\Graduacion;\nuse App\\Models\\Pais;\nuse App\\Models\\Tipo;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Storage;\n\nclass CervezaController extends Controller\n{\n    \n    public function __construct()\n    {\n        $this->middleware('auth:api')->only(['store', 'destroy', 'update', 'patch']);\n    }\n\n    public function index(Request $request)\n    {\n        // Recopila par\xe1metros de consulta desde la solicitud\n        $perPage = $request->input('per_page', 20);\n        $page = $request->input('page', 1);\n        $colorId = $request->input('color_id');\n        $paisId = $request->input('pais_id');\n        $tipoId = $request->input('tipo_id');\n        $graduacionId=$request->input('graduacion_id');\n        $novedad = $request->input('novedad');\n        $oferta = $request->input('oferta');\n        $marca = $request->input('marca');\n        $precioDesde = $request->input('precio_desde');\n        $precioHasta = $request->input('precio_hasta');\n\n        // Construye una consulta utilizando el Query Builder de Laravel\n        $query = DB::table('cervezas as cer')\n            ->select('cer.id', 'cer.nombre', 'cer.descripcion', 'cer.novedad', 'cer.oferta', 'cer.precio', 'cer.foto', 'cer.marca', 'col.nombre as color', 'g.nombre as graduacion', 't.nombre as tipo', 'p.nombre as pais')\n            ->join('colores as col', 'cer.color_id', '=', 'col.id')\n            ->join('graduaciones as g', 'cer.graduacion_id', '=', 'g.id')\n            ->join('tipos as t', 'cer.tipo_id', '=', 't.id')\n            ->join('paises as p', 'cer.pais_id', '=', 'p.id')\n            ->orderBy('cer.nombre');\n\n        // Aplica condiciones seg\xfan los par\xe1metros de consulta\n        if ($colorId) {\n            $query->where('cer.color_id', $colorId);\n        }\n\n        if ($paisId) {\n            $query->where('cer.pais_id', $paisId);\n        }\n\n        if ($graduacionId) {\n            $query->where('cer.graduacion_id', $graduacionId);\n        }\n\n        if ($tipoId) {\n            $query->where('cer.tipo_id', $tipoId);\n        }\n\n        if ($novedad) {\n            $query->where('cer.novedad', $novedad);\n        }\n\n        if ($oferta) {\n            $query->where('cer.oferta', $oferta);\n        }\n\n        if ($marca) {\n            // Realiza una b\xfasqueda de marca insensible a may\xfasculas y min\xfasculas\n            $query->whereRaw('LOWER(cer.marca) LIKE ?', ['%' . strtolower($marca) . '%']);\n        }\n\n        if ($precioDesde && $precioHasta) {\n            $query->whereBetween('cer.precio', [$precioDesde, $precioHasta]);\n        }\n\n        // Realiza una paginaci\xf3n de los resultados\n        $results = $query->paginate($perPage, ['*'], 'page', $page);\n        //print_r($graduacionId);\n        // Devuelve una respuesta JSON con los resultados paginados\n        return response()->json($results);\n    }\n\n    public function store(Request $request)\n    {\n        // Comenzar una transacci\xf3n de base de datos\n        DB::beginTransaction();\n       // return $request;\n\n        try {\n            // Define las reglas de validaci\xf3n para los campos\n            $rules = [\n                'nombre' => 'required|string|unique:cervezas|max:150',\n                'descripcion' => 'required',\n                'color_id' => 'required|numeric',\n                'graduacion_id' => 'required|numeric',\n                'tipo_id' => 'required|numeric',\n                'pais_id' => 'required|numeric',\n                'novedad' => 'required|string|in:true,false',\n                'oferta' => 'required|string|in:true,false',\n                'precio' => 'required|numeric|between:1,1000',\n                'foto'=> 'required|string',\n                'file' => 'required|image|max:2048',\n                'marca' => 'required|string|max:150',\n            ];\n\n            $messages = [\n                'oferta.in' => 'El campo oferta debe ser \"true\" o \"false\".',\n                'novedad.in' => 'El campo novedad debe ser \"true\" o \"false\".',\n                // Mensajes personalizados para otros campos si es necesario...\n            ];\n            // Realiza la validaci\xf3n de la solicitud\n            $validator = Validator::make($request->all(), $rules,$messages);\n\n             \n            // Si la validaci\xf3n falla, devuelve una respuesta JSON con los errores de validaci\xf3n\n            if ($validator->fails()) {\n                DB::rollback();\n                return response()->json($validator->errors(), 400);\n            }\n\n            // Valida la existencia de valores relacionados (por ejemplo, color, graduaci\xf3n, pa\xeds, tipo)\n\n            $color_id = $request->input('color_id');\n            $color = Color::find($color_id);\n            if (!$color) {\n                DB::rollback();\n                return response()->json('El color_id ' . $color_id . ' no existe', 404);\n            }\n\n            $graduacion_id = $request->input('graduacion_id');\n            $graduacion = Graduacion::find($graduacion_id);\n            if (!$graduacion) {\n                DB::rollback();\n                return response()->json('La graduacion_id ' . $graduacion_id . ' no existe', 404);\n            }\n\n            $pais_id = $request->input('pais_id');\n            $pais = Pais::find($pais_id);\n            if (!$pais) {\n                DB::rollback();\n                return response()->json('El pais_id ' . $pais_id . ' no existe', 404);\n            }\n\n            $tipo_id = $request->input('tipo_id');\n            $tipo = Tipo::find($tipo_id);\n            if (!$tipo) {\n                DB::rollback();\n                return response()->json('El tipo_id ' . $tipo_id . ' no existe', 404);\n            }\n\n            $cerveza = $request->all();\n            $cerveza['novedad'] = filter_var($request->input('novedad'), FILTER_VALIDATE_BOOLEAN);\n            $cerveza['oferta'] = filter_var($request->input('oferta'), FILTER_VALIDATE_BOOLEAN);\n    \n            //return $cerveza;\n            // Procesa la imagen y gu\xe1rdala en la carpeta 'storage/images'\n            if ($request->hasFile('file')) {\n                $path = $request->file('file')->store('/public/images');\n                $url = url('/') . '/storage/images/' . basename($path); // 'images' es la subcarpeta donde se almacenar\xe1 la imagen\n\n                $cerveza['foto'] = $url; // Actualiza el campo 'foto' con la ubicaci\xf3n de la imagen almacenad\n            }\n\n            // Guardar la cerveza en la base de datos\n            $cerveza = Cerveza::create($cerveza);\n            \n            // Confirmar la transacci\xf3n si todo se complet\xf3 con \xe9xito\n            DB::commit();\n            \n            // Devuelve una respuesta JSON con la cerveza reci\xe9n creada y el c\xf3digo de respuesta 201 (creado)\n            return response()->json($cerveza, 201);\n        } catch (Exception $e) {\n            // Revertir la transacci\xf3n en caso de fallo\n            DB::rollback();\n\n            // Devuelve una respuesta de error\n            return response()->json('Error al procesar la solicitud', 500);\n        }\n    }\n\n\n    public function show(string $id)\n    {\n        $cerveza = Cerveza::find($id);\n        return response()->json($cerveza, 200);\n    }\n\n    public function update(Request $request, $id)\n    {\n        // El c\xf3digo del m\xe9todo permanece sin cambios\n    }\n\n    \n    public function patch(Request $request, $id)\n    {\n        // Comenzar una transacci\xf3n de base de datos\n        DB::beginTransaction();\n\n        try {\n            // Encuentra la cerveza que deseas actualizar\n            $cerveza = Cerveza::find($id);\n\n            if (!$cerveza) {\n                DB::rollback();\n                return response()->json('La cerveza con ID ' . $id . ' no existe', 404);\n            }\n\n            // Valida la existencia de valores relacionados (por ejemplo, color, graduaci\xf3n, pa\xeds, tipo)\n            // ...\n\n            // Actualiza los campos de la cerveza solo si est\xe1n presentes en la solicitud\n            // Actualiza los campos de la cerveza solo si est\xe1n presentes en la solicitud\n\n            $cerveza->nombre = $request->json('nombre', $cerveza->nombre);\n            $cerveza->descripcion = $request->json('descripcion', $cerveza->descripcion);\n            $cerveza->color_id = $request->json('color_id', $cerveza->color_id);\n            $cerveza->graduacion_id = $request->json('graduacion_id', $cerveza->graduacion_id);\n            $cerveza->tipo_id = $request->json('tipo_id', $cerveza->tipo_id);\n            $cerveza->pais_id = $request->json('pais_id', $cerveza->pais_id);\n            $cerveza->novedad = $request->json('novedad', $cerveza->novedad);\n            $cerveza->oferta = $request->json('oferta', $cerveza->oferta);\n            $cerveza->precio = $request->json('precio', $cerveza->precio);\n            $cerveza->marca = $request->json('marca', $cerveza->marca);\n\n            // Guarda la cerveza\n            $cerveza->save();\n\n\n            // Guarda la cerveza\n            $cerveza->save();\n\n            // Actualiza la imagen si se proporciona una nueva\n            if ($request->hasFile('foto')) {\n                $path = $request->file('foto')->store('/public/images');\n                $url = url('/') . '/storage/images/' . basename($path);\n                $cerveza->foto = $url;\n                $cerveza->save();\n            }\n\n            // Confirmar la transacci\xf3n si todo se complet\xf3 con \xe9xito\n            DB::commit();\n\n            return response()->json($cerveza, 200); // Devuelve la cerveza actualizada\n        } catch (Exception $e) {\n            // Revertir la transacci\xf3n en caso de fallo\n            DB::rollback();\n\n            // Devuelve una respuesta de error\n            return response()->json('Error al procesar la solicitud', 500);\n        }\n    }\n\n\n   \n    public function destroy(string $id)\n    {\n        // Comienza una transacci\xf3n de base de datos\n        DB::beginTransaction();\n\n        try {\n            // Encuentra el modelo que deseas eliminar\n            $cerveza = Cerveza::find($id);\n\n            if (!$cerveza) {\n                DB::rollback();\n                return response()->json('El recurso con ID ' . $id . ' no existe', 404);\n            }\n\n            // Elimina la imagen asociada si existe\n            if (!empty($cerveza->foto)) {\n                Storage::delete('public/images/' . basename($cerveza->foto));\n            }\n\n            // Elimina el modelo\n            $cerveza->delete();\n\n            // Confirmar la transacci\xf3n si todo se complet\xf3 con \xe9xito\n            DB::commit();\n\n            return response()->json('Recurso eliminado correctamente', 200);\n        } catch (Exception $e) {\n            // Revertir la transacci\xf3n en caso de fallo\n            DB::rollback();\n\n            // Devuelve una respuesta de error\n            return response()->json('Error al procesar la solicitud', 500);\n        }\n    }\n}\n\n")),(0,o.kt)("h3",{id:"m\xe9todo-index"},"M\xe9todo Index"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," se encarga de recuperar una lista de cervezas con la posibilidad de aplicar varios filtros y paginar los resultados.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Se recopilan los par\xe1metros de consulta de la solicitud, como el n\xfamero de elementos por p\xe1gina (",(0,o.kt)("inlineCode",{parentName:"p"},"per_page"),"), la p\xe1gina actual (",(0,o.kt)("inlineCode",{parentName:"p"},"page"),"), y varios filtros como ",(0,o.kt)("inlineCode",{parentName:"p"},"color_id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"pais_id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"tipo_id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"novedad"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"oferta"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"marca"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"precio_desde"),", y ",(0,o.kt)("inlineCode",{parentName:"p"},"precio_hasta"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"}," // Recopila par\xe1metros de consulta desde la solicitud\n        $perPage = $request->input('per_page', 10);\n        $page = $request->input('page', 1);\n        $colorId = $request->input('color_id');\n        $paisId = $request->input('pais_id');\n        $tipoId = $request->input('tipo_id');\n        $novedad = $request->input('novedad');\n        $oferta = $request->input('oferta');\n        $marca = $request->input('marca');\n        $precioDesde = $request->input('precio_desde');\n        $precioHasta = $request->input('precio_hasta');\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Se construye una consulta SQL utilizando el Query Builder de Laravel, que selecciona las columnas deseadas de la tabla ",(0,o.kt)("inlineCode",{parentName:"li"},"cervezas")," y se une a las tablas relacionadas como ",(0,o.kt)("inlineCode",{parentName:"li"},"colores"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"graduaciones"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"tipos"),", y ",(0,o.kt)("inlineCode",{parentName:"li"},"paises"),". La consulta se ordena por el nombre de las cervezas.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Construye una consulta utilizando el Query Builder de Laravel\n        $query = DB::table('cervezas as cer')\n            ->select('cer.id', 'cer.nombre', 'cer.descripcion', 'cer.novedad', 'cer.oferta', 'cer.precio', 'cer.foto', 'cer.marca', 'col.nombre as color', 'g.nombre as graduacion', 't.nombre as tipo', 'p.nombre as pais')\n            ->join('colores as col', 'cer.color_id', '=', 'col.id')\n            ->join('graduaciones as g', 'cer.graduacion_id', '=', 'g.id')\n            ->join('tipos as t', 'cer.tipo_id', '=', 't.id')\n            ->join('paises as p', 'cer.pais_id', '=', 'p.id')\n            ->orderBy('cer.nombre');\n\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Se aplican condiciones a la consulta seg\xfan los filtros proporcionados en los par\xe1metros de la solicitud. Por ejemplo, si se proporciona un valor para ",(0,o.kt)("inlineCode",{parentName:"li"},"color_id"),", se filtra por ese color; si se proporciona un valor para ",(0,o.kt)("inlineCode",{parentName:"li"},"novedad"),", se filtra por novedad, y as\xed sucesivamente.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"}," // Aplica condiciones seg\xfan los par\xe1metros de consulta\n        if ($colorId) {\n            $query->where('cer.color_id', $colorId);\n        }\n\n        if ($paisId) {\n            $query->where('cer.pais_id', $paisId);\n        }\n\n        if ($tipoId) {\n            $query->where('cer.tipo_id', $tipoId);\n        }\n\n        if ($novedad) {\n            $query->where('cer.novedad', $novedad);\n        }\n\n        if ($oferta) {\n            $query->where('cer.oferta', $oferta);\n        }\n\n        if ($marca) {\n            // Realiza una b\xfasqueda de marca insensible a may\xfasculas y min\xfasculas\n            $query->whereRaw('LOWER(cer.marca) LIKE ?', ['%' . strtolower($marca) . '%']);\n        }\n\n        if ($precioDesde && $precioHasta) {\n            $query->whereBetween('cer.precio', [$precioDesde, $precioHasta]);\n        }\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Si se proporciona un valor para ",(0,o.kt)("inlineCode",{parentName:"p"},"marca"),', se realiza una b\xfasqueda insensible a may\xfasculas y min\xfasculas en la columna "marca".')),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Si se proporcionan valores para ",(0,o.kt)("inlineCode",{parentName:"p"},"precio_desde")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"precio_hasta"),", se filtra por un rango de precios.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finalmente, se aplica la paginaci\xf3n a los resultados de la consulta, utilizando los valores de ",(0,o.kt)("inlineCode",{parentName:"p"},"per_page")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"page"),", y se obtiene una colecci\xf3n paginada de cervezas.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Los resultados paginados se devuelven como una respuesta JSON, lo que permite a los clientes de la API acceder a la lista de cervezas de manera estructurada y paginada, lo que facilita la navegaci\xf3n y la presentaci\xf3n de los datos."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"}," return response()->json($results);\n")),(0,o.kt)("h3",{id:"m\xe9todo-store"},"M\xe9todo Store"),(0,o.kt)("p",null,"A continuaci\xf3n revisaremos el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"Store"),". Para despu\xe9s entrar en m\xe1s detalle en el."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"}," public function store(Request $request)\n    {\n        // Comenzar una transacci\xf3n de base de datos\n        DB::beginTransaction();\n       // return $request;\n\n        try {\n            // Define las reglas de validaci\xf3n para los campos\n            $rules = [\n                'nombre' => 'required|string|unique:cervezas|max:150',\n                'descripcion' => 'required',\n                'color_id' => 'required|numeric',\n                'graduacion_id' => 'required|numeric',\n                'tipo_id' => 'required|numeric',\n                'pais_id' => 'required|numeric',\n                'novedad' => 'required|string|in:true,false',\n                'oferta' => 'required|string|in:true,false',\n                'precio' => 'required|numeric|between:1,1000',\n                'foto'=> 'required|string',\n                'file' => 'required|image|max:2048',\n                'marca' => 'required|string|max:150',\n            ];\n\n            $messages = [\n                'oferta.in' => 'El campo oferta debe ser \"true\" o \"false\".',\n                'novedad.in' => 'El campo novedad debe ser \"true\" o \"false\".',\n                // Mensajes personalizados para otros campos si es necesario...\n            ];\n            // Realiza la validaci\xf3n de la solicitud\n            $validator = Validator::make($request->all(), $rules,$messages);\n\n             \n            // Si la validaci\xf3n falla, devuelve una respuesta JSON con los errores de validaci\xf3n\n            if ($validator->fails()) {\n                DB::rollback();\n                return response()->json($validator->errors(), 400);\n            }\n\n            // Valida la existencia de valores relacionados (por ejemplo, color, graduaci\xf3n, pa\xeds, tipo)\n\n            $color_id = $request->input('color_id');\n            $color = Color::find($color_id);\n            if (!$color) {\n                DB::rollback();\n                return response()->json('El color_id ' . $color_id . ' no existe', 404);\n            }\n\n            $graduacion_id = $request->input('graduacion_id');\n            $graduacion = Graduacion::find($graduacion_id);\n            if (!$graduacion) {\n                DB::rollback();\n                return response()->json('La graduacion_id ' . $graduacion_id . ' no existe', 404);\n            }\n\n            $pais_id = $request->input('pais_id');\n            $pais = Pais::find($pais_id);\n            if (!$pais) {\n                DB::rollback();\n                return response()->json('El pais_id ' . $pais_id . ' no existe', 404);\n            }\n\n            $tipo_id = $request->input('tipo_id');\n            $tipo = Tipo::find($tipo_id);\n            if (!$tipo) {\n                DB::rollback();\n                return response()->json('El tipo_id ' . $tipo_id . ' no existe', 404);\n            }\n\n            $cerveza = $request->all();\n            $cerveza['novedad'] = filter_var($request->input('novedad'), FILTER_VALIDATE_BOOLEAN);\n            $cerveza['oferta'] = filter_var($request->input('oferta'), FILTER_VALIDATE_BOOLEAN);\n    \n            //return $cerveza;\n            // Procesa la imagen y gu\xe1rdala en la carpeta 'storage/images'\n            if ($request->hasFile('file')) {\n                $path = $request->file('file')->store('/public/images');\n                $url = url('/') . '/storage/images/' . basename($path); // 'images' es la subcarpeta donde se almacenar\xe1 la imagen\n\n                $cerveza['foto'] = $url; // Actualiza el campo 'foto' con la ubicaci\xf3n de la imagen almacenad\n            }\n\n            // Guardar la cerveza en la base de datos\n            $cerveza = Cerveza::create($cerveza);\n            \n            // Confirmar la transacci\xf3n si todo se complet\xf3 con \xe9xito\n            DB::commit();\n            \n            // Devuelve una respuesta JSON con la cerveza reci\xe9n creada y el c\xf3digo de respuesta 201 (creado)\n            return response()->json($cerveza, 201);\n        } catch (Exception $e) {\n            // Revertir la transacci\xf3n en caso de fallo\n            DB::rollback();\n\n            // Devuelve una respuesta de error\n            return response()->json('Error al procesar la solicitud', 500);\n        }\n    }\n")),(0,o.kt)("h3",{id:"exploraci\xf3n-del-m\xe9todo-store"},"Exploraci\xf3n del M\xe9todo store"),(0,o.kt)("h4",{id:"1-iniciando-una-transacci\xf3n-de-base-de-datos"},(0,o.kt)("strong",{parentName:"h4"},"1. Iniciando una Transacci\xf3n de Base de Datos")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Inicio de la transacci\xf3n de base de datos\nDB::beginTransaction();\n")),(0,o.kt)("p",null,"Inicia una transacci\xf3n de base de datos para asegurar que todas las operaciones dentro de este bloque se completen exitosamente antes de confirmar la transacci\xf3n."),(0,o.kt)("h4",{id:"2-definiendo-reglas-de-validaci\xf3n"},(0,o.kt)("strong",{parentName:"h4"},"2. Definiendo Reglas de Validaci\xf3n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Definici\xf3n de reglas de validaci\xf3n\n // Define las reglas de validaci\xf3n para los campos\n$rules = [\n    'nombre' => 'required|string|unique:cervezas|max:150',\n    'descripcion' => 'required',\n    'color_id' => 'required|numeric',\n    'graduacion_id' => 'required|numeric',\n    'tipo_id' => 'required|numeric',\n    'pais_id' => 'required|numeric',\n    'novedad' => 'required|string|in:true,false',\n    'oferta' => 'required|string|in:true,false',\n    'precio' => 'required|numeric|between:1,1000',\n    'foto'=> 'required|string',\n    'file' => 'required|image|max:2048',\n    'marca' => 'required|string|max:150',\n];\n")),(0,o.kt)("p",null,"Define reglas de validaci\xf3n para los campos de la cerveza. Estas reglas garantizan que los datos proporcionados en la solicitud cumplan con los requisitos antes de intentar almacenarlos en la base de datos. Hay un detalle interesante en la validaci\xf3n de esta solicitud. Ya que recibiremos la solicitud a trav\xe9s de un formData, debemos enviar el campo oferta y novedad como una cadena (string), ya que los datos tipo booleano no son bien aceptados en el fetch del cliente. Veremos m\xe1s adelante c\xf3mo transformarlos en booleanos antes de grabarlos en la base de datos (BBDD)"),(0,o.kt)("h4",{id:"3-realizando-la-validaci\xf3n-de-la-solicitud"},(0,o.kt)("strong",{parentName:"h4"},"3. Realizando la Validaci\xf3n de la Solicitud")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Realizaci\xf3n de la validaci\xf3n de la solicitud\n$validator = Validator::make($request->all(), $rules);\n\nif ($validator->fails()) {\n    DB::rollback();\n    return response()->json($validator->errors(), 400);\n}\n")),(0,o.kt)("p",null,"Utiliza el validador de Laravel para verificar si los datos de la solicitud cumplen con las reglas establecidas. Si la validaci\xf3n falla, revierte la transacci\xf3n y devuelve una respuesta JSON con los errores de validaci\xf3n y un c\xf3digo de estado 400."),(0,o.kt)("h4",{id:"4-validando-la-existencia-de-valores-relacionados"},(0,o.kt)("strong",{parentName:"h4"},"4. Validando la Existencia de Valores Relacionados")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$color_id = $request->input('color_id');\n$color = Color::find($color_id);\n\nif (!$color) {\n    DB::rollback();\n    return response()->json('El color_id ' . $color_id . ' no existe', 404);\n}\n")),(0,o.kt)("p",null,"Verifica la existencia de valores relacionados, como el color, la graduaci\xf3n, el pa\xeds y el tipo de cerveza, utilizando los modelos Eloquent correspondientes. Si alguno de estos valores no existe, revierte la transacci\xf3n y devuelve una respuesta JSON con un c\xf3digo de estado 404."),(0,o.kt)("h4",{id:"5-procesamiento-y-almacenamiento-de-la-imagen"},(0,o.kt)("strong",{parentName:"h4"},"5. Procesamiento y Almacenamiento de la Imagen")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$cerveza = $request->all();\n\n//Convertimos a valores boleanos novedad y oferta\n$cerveza['novedad'] = filter_var($request->input('novedad'), FILTER_VALIDATE_BOOLEAN);\n$cerveza['oferta'] = filter_var($request->input('oferta'), FILTER_VALIDATE_BOOLEAN);\n    \nif ($request->hasFile('foto')) {\n    $path = $request->file('foto')->store('/public/images');\n    $url = '/storage/images/' . basename($path);\n    $cerveza['foto'] = $url;\n}\n")),(0,o.kt)("p",null,"Si se proporciona una imagen en la solicitud, la procesa y almacena utilizando el sistema de almacenamiento de Laravel. La URL resultante se asigna al campo 'foto' de la cerveza."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"El comando ",(0,o.kt)("strong",{parentName:"mdxAdmonitionTitle"},(0,o.kt)("em",{parentName:"strong"},"php artisan storage:link"))),(0,o.kt)("p",{parentName:"admonition"},"Claro que s\xed. El comando ",(0,o.kt)("inlineCode",{parentName:"p"},"php artisan storage:link")," crea un enlace simb\xf3lico (o symlink) en la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"public/storage")," que apunta a la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"storage/app/public"),". Esto permite que los archivos almacenados en la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"storage/app/public")," sean accesibles desde la web."),(0,o.kt)("p",{parentName:"admonition"},"Por defecto, el sistema de archivos ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," utiliza el controlador local y almacena sus archivos en la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"storage/app/public"),". Para que estos archivos sean accesibles desde la web, es necesario crear un enlace simb\xf3lico desde la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"public/storage")," a la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"storage/app/public"),"."),(0,o.kt)("p",{parentName:"admonition"},"El comando ",(0,o.kt)("inlineCode",{parentName:"p"},"php artisan storage:link")," crea este enlace simb\xf3lico autom\xe1ticamente. Para ejecutarlo, simplemente ejecute el siguiente comando en la l\xednea de comandos:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"php artisan storage:link\n")),(0,o.kt)("p",{parentName:"admonition"},"Este comando crear\xe1 un enlace simb\xf3lico llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," en la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," que apunta a la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"storage/app/public"),"."),(0,o.kt)("p",{parentName:"admonition"},"Una vez que haya creado el enlace simb\xf3lico, podr\xe1 acceder a los archivos almacenados en la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"storage/app/public")," desde la web utilizando la ruta ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/[ruta_al_archivo]"),". Por ejemplo, si tiene un archivo llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"file.jpg")," almacenado en la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"storage/app/public/images"),", puede acceder a \xe9l desde la web utilizando la ruta ",(0,o.kt)("inlineCode",{parentName:"p"},"/storage/images/file.jpg"),"."),(0,o.kt)("p",{parentName:"admonition"},"Es importante tener en cuenta que el comando ",(0,o.kt)("inlineCode",{parentName:"p"},"php artisan storage:link")," solo funciona en sistemas operativos que admiten enlaces simb\xf3licos. ")),(0,o.kt)("h4",{id:"6-guardando-la-cerveza-en-la-base-de-datos"},(0,o.kt)("strong",{parentName:"h4"},"6. Guardando la Cerveza en la Base de Datos")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Guardar la cerveza en la base de datos\n$cerveza = Cerveza::create($cerveza);\n")),(0,o.kt)("p",null,"Utiliza el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," de Eloquent para crear una nueva instancia de la cerveza y guardarla en la base de datos."),(0,o.kt)("h4",{id:"7-confirmando-la-transacci\xf3n"},(0,o.kt)("strong",{parentName:"h4"},"7. Confirmando la Transacci\xf3n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"DB::commit();\n")),(0,o.kt)("p",null,"Si todas las operaciones se han realizado con \xe9xito, confirma la transacci\xf3n, lo que significa que los cambios realizados en la base de datos son permanentes."),(0,o.kt)("h4",{id:"8-respuesta-de-\xe9xito-o-manejo-de-errores"},(0,o.kt)("strong",{parentName:"h4"},"8. Respuesta de \xc9xito o Manejo de Errores")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"return response()->json($cerveza, 201);\n\n} catch (Exception $e) {\n    DB::rollback();\n    return response()->json('Error al procesar la solicitud', 500);\n}\n")),(0,o.kt)("p",null,"Si todo el proceso se ha completado sin problemas, devuelve una respuesta JSON con la cerveza reci\xe9n creada y un c\xf3digo de estado 201. En caso de alg\xfan error durante el proceso, revierte la transacci\xf3n y devuelve una respuesta de error con un c\xf3digo de estado 500."))}u.isMDXComponent=!0}}]);