"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[160],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>g});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),c=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=c(e.components);return t.createElement(l.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return n?t.createElement(g,o(o({ref:a},d),{},{components:n})):t.createElement(g,o({ref:a},d))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1173:(e,a,n)=>{n.r(a),n.d(a,{TablaConImagenes:()=>d,assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var t=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},o="Migraciones",s={unversionedId:"BacKend/migraciones",id:"BacKend/migraciones",title:"Migraciones",description:"\xbfQu\xe9 es una migraci\xf3n?",source:"@site/docs/BacKend/migraciones.mdx",sourceDirName:"BacKend",slug:"/BacKend/migraciones",permalink:"/api_cervezas_doc/docs/BacKend/migraciones",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/BacKend/migraciones.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Definici\xf3n de modelos y migraciones",permalink:"/api_cervezas_doc/docs/category/definici\xf3n-de-modelos-y-migraciones"},next:{title:"Creando modelos y relaciones",permalink:"/api_cervezas_doc/docs/BacKend/modelos"}},l={},c=[{value:"\xbfQu\xe9 es una migraci\xf3n?",id:"qu\xe9-es-una-migraci\xf3n",level:2},{value:"\ud83d\udcc7Modelo ER",id:"modelo-er",level:3},{value:"\xbfQu\xe9 es una migraci\xf3n?",id:"qu\xe9-es-una-migraci\xf3n-1",level:2},{value:"Generando migraciones en Laravel",id:"generando-migraciones-en-laravel",level:2},{value:"Definiendo las tablas de la Base de Datos",id:"definiendo-las-tablas-de-la-base-de-datos",level:2},{value:"\ud83d\udcc7 Tabla de Colores",id:"-tabla-de-colores",level:3},{value:"Revisando la tabla migraciones",id:"revisando-la-tabla-migraciones",level:3},{value:"\ud83d\udcc7Tabla Tipos",id:"tabla-tipos",level:3},{value:"\ud83d\udcc7Tabla Paises",id:"tabla-paises",level:3},{value:"\ud83d\udcc7Tabla graduaciones",id:"tabla-graduaciones",level:3},{value:"\ud83d\udcc7Tabla Cervezas",id:"tabla-cervezas",level:3},{value:"Integridad referencial",id:"integridad-referencial",level:3},{value:"\ud83d\udcc7Modificando la tabla cervezas",id:"modificando-la-tabla-cervezas",level:3},{value:"Utilizar SQL nativo",id:"utilizar-sql-nativo",level:2},{value:"\xbfPor qu\xe9 utilizar SQL en nuestras migraciones?",id:"por-qu\xe9-utilizar-sql-en-nuestras-migraciones",level:3},{value:"Creaci\xf3n de vistas",id:"creaci\xf3n-de-vistas",level:3},{value:"Creaci\xf3n de triggers",id:"creaci\xf3n-de-triggers",level:3},{value:"Creaci\xf3n de procedimientos almacenados",id:"creaci\xf3n-de-procedimientos-almacenados",level:3}];function d(){return(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"ID"),(0,r.kt)("th",null,"Nombre"),(0,r.kt)("th",null,"Imagen_cerveza_foto"),(0,r.kt)("th",null,"Descripci\xf3n"),(0,r.kt)("th",null,"Novedad"),(0,r.kt)("th",null,"Oferta"),(0,r.kt)("th",null,"Precio"),(0,r.kt)("th",null,"Marca"),(0,r.kt)("th",null,"Color"),(0,r.kt)("th",null,"Graduaci\xf3n"),(0,r.kt)("th",null,"Tipo"),(0,r.kt)("th",null,"Pa\xeds"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"1"),(0,r.kt)("td",null,"POMELO IPA IDA Y VUELTA 24x33cl"),(0,r.kt)("td",{width:"200px"},(0,r.kt)("img",{src:"https://res.cloudinary.com/dkrew530b/image/upload/v1697309153/pomelo_ipa_ida_y_vuelta_24x33cl_4baeb73584.jpg",alt:"Imagen 1"})),(0,r.kt)("td",null,"**Estilo POMELO IPA. Sin gluten** 5,8 % ABV IBU\xb4S 50, amarga. **INGREDIENTES: **Agua; maltas de trigo Torrefacto y Extra pale; l\xfapulos Cascade, Columbus y Citra, copos de AVENA, zumo y cascara de pomelo, y levadura Ale. Gastos de env\xedo Espa\xf1a Peninsu..."),(0,r.kt)("td",null,"0"),(0,r.kt)("td",null,"0"),(0,r.kt)("td",null,"59.81"),(0,r.kt)("td",null,"DouGall's"),(0,r.kt)("td",null,"Amarillo"),(0,r.kt)("td",null,"Muy alta (9-12)"),(0,r.kt)("td",null,"Lager/Pilsner"),(0,r.kt)("td",null,"Espa\xf1a")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"2"),(0,r.kt)("td",null,"DIPA or Nothing 12x33"),(0,r.kt)("td",{width:"200px"},(0,r.kt)("img",{src:"https://res.cloudinary.com/dkrew530b/image/upload/v1697311032/dipa_or_nothing_12x33_a547d464d5.jpg",alt:"Imagen 2",style:{width:"700px"}})),(0,r.kt)("td",null,"Estilo: DDH Doble IPA Alcohol: 7,5 % Abv IBU\u2019S: 70 Bastante Amarga Sin gluten Ingredientes , Agua, maltas y l\xfapulos Incognito Mosaic, Azacca y Vic Secret. Gastos de env\xedo Espa\xf1a Peninsular incluidos."),(0,r.kt)("td",null,"0"),(0,r.kt)("td",null,"0"),(0,r.kt)("td",null,"46.58"),(0,r.kt)("td",null,"DIPA or Nothing"),(0,r.kt)("td",null,"Tostada"),(0,r.kt)("td",null,"Alta (7-9)"),(0,r.kt)("td",null,"Sour Beer"),(0,r.kt)("td",null,"Alemania"))))}const u={toc:c,TablaConImagenes:d},p="wrapper";function m(e){let{components:a,...i}=e;return(0,r.kt)(p,(0,t.Z)({},u,i,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"migraciones"},"Migraciones"),(0,r.kt)("h2",{id:"qu\xe9-es-una-migraci\xf3n"},"\xbfQu\xe9 es una migraci\xf3n?"),(0,r.kt)("p",null,"En t\xe9rminos simples, una migraci\xf3n en Laravel es un conjunto de instrucciones que permiten a los desarrolladores crear o modificar la estructura de una base de datos en su aplicaci\xf3n web. En lugar de modificar manualmente la base de datos, los desarrolladores pueden crear archivos de migraci\xf3n que describen los cambios que deben hacerse. Estos archivos de migraci\xf3n se ejecutan autom\xe1ticamente utilizando comandos de Artisan, lo que permite a los desarrolladores actualizar la estructura de la base de datos de manera controlada y coherente con la evoluci\xf3n de la aplicaci\xf3n. En resumen, las migraciones son una herramienta \xfatil que permite a los desarrolladores administrar la estructura de la base de datos de manera program\xe1tica y coherente, lo que puede ahorrar tiempo y reducir errores en la gesti\xf3n de la base de datos."),(0,r.kt)("p",null,"Uno de los beneficios clave de utilizar migraciones es el control de versiones. Al utilizar archivos de migraci\xf3n, los desarrolladores pueden mantener un registro de los cambios en la estructura de la base de datos a medida que evoluciona la aplicaci\xf3n. Esto es especialmente \xfatil cuando hay varios desarrolladores trabajando en el mismo proyecto o cuando se realiza un seguimiento de diferentes versiones de la aplicaci\xf3n. Cada archivo de migraci\xf3n se puede etiquetar con un n\xfamero de versi\xf3n, lo que ayuda a los desarrolladores a realizar un seguimiento de los cambios y a asegurarse de que todos los miembros del equipo est\xe9n trabajando con la misma versi\xf3n de la base de datos."),(0,r.kt)("p",null,"Otro beneficio importante de las migraciones es que pueden ahorrar tiempo y reducir errores en la gesti\xf3n de la base de datos. En lugar de tener que modificar manualmente la base de datos cada vez que se realizan cambios en la estructura de la base de datos, los desarrolladores pueden crear archivos de migraci\xf3n que describen los cambios que deben hacerse. Estos archivos de migraci\xf3n se pueden ejecutar autom\xe1ticamente utilizando comandos de Artisan, lo que ahorra tiempo y reduce la posibilidad de errores humanos."),(0,r.kt)("p",null,'Adem\xe1s, las migraciones en Laravel tambi\xe9n son muy flexibles. Los desarrolladores pueden crear migraciones para agregar nuevas tablas, modificar columnas existentes, agregar restricciones de clave for\xe1nea, crear \xedndices, eliminar tablas y mucho m\xe1s. Cada migraci\xf3n se compone de dos m\xe9todos principales: el m\xe9todo "up" que describe los cambios que deben realizarse en la base de datos y el m\xe9todo "down" que describe c\xf3mo deshacer esos cambios.'),(0,r.kt)("p",null,"En resumen, las migraciones en Laravel son una herramienta esencial para administrar la estructura de la base de datos de manera program\xe1tica y coherente con la evoluci\xf3n de la aplicaci\xf3n. Al utilizar migraciones, los desarrolladores pueden mantener un registro de los cambios de la base de datos, ahorrar tiempo y reducir errores en la gesti\xf3n de la base de datos, y tener una gran flexibilidad para realizar cambios en la estructura de la base de datos."),(0,r.kt)("h3",{id:"modelo-er"},"\ud83d\udcc7Modelo ER"),(0,r.kt)("p",null,"Este es el modelo entidad/relaci\xf3n de nuestra BB.DD."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Modelo E/R",src:n(3844).Z,width:"785",height:"957"})),(0,r.kt)("h2",{id:"qu\xe9-es-una-migraci\xf3n-1"},"\xbfQu\xe9 es una migraci\xf3n?"),(0,r.kt)("p",null,"Una ",(0,r.kt)("strong",{parentName:"p"},"migraci\xf3n")," en Laravel es un archivo de PHP que describe una operaci\xf3n de base de datos, como la creaci\xf3n de una tabla o la modificaci\xf3n de una columna existente. Las migraciones permiten que los desarrolladores gestionen los cambios en la estructura de la base de datos de manera sencilla y segura, ya que todos los cambios se realizan a trav\xe9s de archivos que se pueden controlar con un sistema de control de versiones como Git."),(0,r.kt)("p",null,"Cuando se ejecutan las migraciones, Laravel las aplica autom\xe1ticamente a la base de datos mediante una serie de comandos SQL. Esto garantiza que la estructura de la base de datos sea la misma en todas las instancias del proyecto, ya sea en un entorno de desarrollo local, en un servidor de pruebas o en producci\xf3n."),(0,r.kt)("p",null,"Adem\xe1s, las migraciones tambi\xe9n proporcionan un mecanismo para revertir los cambios en la base de datos, lo que es \xfatil en caso de que se deban hacer cambios en la estructura de la base de datos y luego se deba revertir a una versi\xf3n anterior."),(0,r.kt)("p",null,"En resumen, las migraciones en Laravel son una herramienta esencial para el desarrollo de aplicaciones que requieren una gesti\xf3n de base de datos robusta y f\xe1cil de usar."),(0,r.kt)("admonition",{title:"Para saber m\xe1s",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Para m\xe1s informaci\xf3n consulte ",(0,r.kt)("a",{parentName:"p",href:"httbash://laravel.com/docs/9.x/migrations#generating-migrations"},"la documentaci\xf3n oficial de Laravel."))),(0,r.kt)("h2",{id:"generando-migraciones-en-laravel"},"Generando migraciones en Laravel"),(0,r.kt)("p",null,"A continuaci\xf3n, generaremos las migraciones necesarias para crear la estructura requerida en nuestra base de datos. Crearemos todas las tablas necesarias para nuestra aplicaci\xf3n de comercio electr\xf3nico a trav\xe9s de estas migraciones. Comenzaremos con las tablas m\xe1s simples y avanzaremos hasta nuestra tabla principal, conocida como ",(0,r.kt)("strong",{parentName:"p"},"Cervezas"),"."),(0,r.kt)("p",null,"Como es ampliamente reconocido, una cerveza suele contar con una serie de caracter\xedsticas o propiedades que comparte con otras cervezas, al tiempo que la distinguen de las dem\xe1s. Entre estas caracter\xedsticas se encuentra el color. Existen varios tipos de colores estandarizados, como tostado, \xe1mbar, negro y amarillo, que definen el color de una cerveza."),(0,r.kt)("p",null,"Empezaremos creando la tabla ",(0,r.kt)("strong",{parentName:"p"},"Colores"),", la cual almacenar\xe1 todos los colores de las cervezas y se relacionar\xe1 con nuestra tabla de ",(0,r.kt)("strong",{parentName:"p"},"Cervezas"),"."),(0,r.kt)("p",null,"Para crear la migraci\xf3n de la tabla de categor\xedas, ingrese el siguiente comando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:migration create_colores_table\n")),(0,r.kt)("p",null,"Para generar una migraci\xf3n en Laravel 10, se suele utilizar el comando ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"php Artisan make:migration: nombreDeLaMigraci\xf3n")),". Es el comando que hemos ejecutado anteriormente, donde ",(0,r.kt)("strong",{parentName:"p"},"NombreDeLaMigracion")," es el nombre que le quieres dar a la migraci\xf3n, y ",(0,r.kt)("strong",{parentName:"p"},"nombre_de_la_tabla")," es el nombre de la tabla que se crear\xe1 en la base de datos."),(0,r.kt)("p",null,"Esto crear\xe1 un archivo de migraci\xf3n en la carpeta ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"database/migrations"))," con un nombre similar a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"yyyy_mm_dd_hhmmss_NombreDeLaMigracion.php")),"."),(0,r.kt)("p",null,"Luego, puedes editar ese archivo para definir las columnas que deseas agregar a la tabla. Finalmente, ejecuta el comando ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"php artisan migrate"))," para aplicar las migraciones a la base de datos."),(0,r.kt)("p",null,"A continuaci\xf3n, veamos qu\xe9 nos ha generado el comando anterior."),(0,r.kt)("h2",{id:"definiendo-las-tablas-de-la-base-de-datos"},"Definiendo las tablas de la Base de Datos"),(0,r.kt)("h3",{id:"-tabla-de-colores"},"\ud83d\udcc7 Tabla de Colores"),(0,r.kt)("p",null,"Veamos qu\xe9 ha hecho el comando anteriormente ejecutado:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de colores"',title:'"Migraci\xf3n',de:!0,'colores"':!0},"php artisan make:migration create_colores_table\n")),(0,r.kt)("admonition",{title:"Importante",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Siga la convenci\xf3n en sus creaciones de tabla utilizando ",(0,r.kt)("strong",{parentName:"p"},"create_nombre_de_tabla_table"),", si quiere evitarse problemas en el futuro."),(0,r.kt)("p",{parentName:"admonition"},"La fecha de la migraci\xf3n es importante, ya que esta determina el orden de ejecuci\xf3n de las mismas. Esto es importante en el caso de que tengamos tablas relacionadas; deberemos crear primero las ",(0,r.kt)("strong",{parentName:"p"},"entidades fuertes")," que las ",(0,r.kt)("strong",{parentName:"p"},"entidades d\xe9biles"),".")),(0,r.kt)("p",null,"Dir\xedjase al directorio ",(0,r.kt)("inlineCode",{parentName:"p"},"database/migrations")," y edite el archivo con la migraci\xf3n. Podr\xe1 observar el siguiente c\xf3digo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('colores', function (Blueprint $table) {\n            $table->id();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('colores');\n    }\n};\n\n")),(0,r.kt)("p",null,"El c\xf3digo crea una clase an\xf3nima que extiende la clase Migration de Illuminate y define dos m\xe9todos: up() y down()."),(0,r.kt)("p",null,'El m\xe9todo up() es invocado cuando se ejecuta el comando php artisan migrate y se utiliza para crear la tabla "categor\xedas" en la base de datos con las siguientes columnas:'),(0,r.kt)("p",null,'id: una columna con clave primaria que se genera autom\xe1ticamente como una secuencia incremental.\nnombre: una columna de tipo cadena con un tama\xf1o m\xe1ximo de 150 caracteres que es \xfanica.\ndescripcion: una columna de tipo texto.\nimagen: una columna de tipo texto que puede ser nula.\ncreated_at y updated_at: dos columnas de tipo fecha y hora que se generan autom\xe1ticamente y se actualizan autom\xe1ticamente al insertar o actualizar un registro.\nEl m\xe9todo down() es invocado cuando se ejecuta el comando php artisan migrate:rollback y se utiliza para eliminar la tabla "categor\xedas".'),(0,r.kt)("p",null,"Ahora veremos como a\xf1adir campos a nuestra tabla:"),(0,r.kt)("admonition",{title:"tipos de datos m\xe1s comunes en Laravel",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"En Laravel, los tipos de datos en las migraciones se refieren a las especificaciones de los tipos de columnas en las tablas de la base de datos. Algunos de los tipos de datos m\xe1s comunes incluyen:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"bigIncrements: Incremento autom\xe1tico de ID grande"),(0,r.kt)("li",{parentName:"ul"},"bigInteger: Entero grande"),(0,r.kt)("li",{parentName:"ul"},"binary: Datos binarios"),(0,r.kt)("li",{parentName:"ul"},"boolean: Valor booleano"),(0,r.kt)("li",{parentName:"ul"},"char: Cadena fija de longitud"),(0,r.kt)("li",{parentName:"ul"},"date: Fecha"),(0,r.kt)("li",{parentName:"ul"},"dateTime: Fecha y hora"),(0,r.kt)("li",{parentName:"ul"},"decimal: N\xfamero decimal con precisi\xf3n y escala espec\xedficas"),(0,r.kt)("li",{parentName:"ul"},"double: N\xfamero de punto flotante de doble precisi\xf3n"),(0,r.kt)("li",{parentName:"ul"},"enum: Valor de una lista predefinida"),(0,r.kt)("li",{parentName:"ul"},"float: N\xfamero de punto flotante"),(0,r.kt)("li",{parentName:"ul"},"increments: Incremento autom\xe1tico de ID"),(0,r.kt)("li",{parentName:"ul"},"integer: Entero"),(0,r.kt)("li",{parentName:"ul"},"json: Datos en formato JSON"),(0,r.kt)("li",{parentName:"ul"},"longText: Texto largo"),(0,r.kt)("li",{parentName:"ul"},"mediumText: Texto de tama\xf1o medio"),(0,r.kt)("li",{parentName:"ul"},"smallInteger: Entero peque\xf1o"),(0,r.kt)("li",{parentName:"ul"},"string: Cadena"),(0,r.kt)("li",{parentName:"ul"},"text: Texto"),(0,r.kt)("li",{parentName:"ul"},"time: Tiempo"),(0,r.kt)("li",{parentName:"ul"},"timestamp: Marca de tiempo"),(0,r.kt)("li",{parentName:"ul"},"unsignedBigInteger: Entero grande sin signo"),(0,r.kt)("li",{parentName:"ul"},"unsignedInteger: Entero sin signo.")),(0,r.kt)("p",{parentName:"admonition"},"Estos son algunos de los tipos de datos m\xe1s comunes que puedes usar en tus migraciones en Laravel.")),(0,r.kt)("p",null,"Vamos a a\xf1adir una columna a nuestra tabla, donde guardaremos el nombre del color:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('colores', function (Blueprint $table) {\n            $table->id(); // Campo ID autoincremental\n            $table->string('nombre')->unique(); // Ejemplo de otro campo, puedes a\xf1adir los necesarios\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('colores');\n    }\n};\n")),(0,r.kt)("h3",{id:"revisando-la-tabla-migraciones"},"Revisando la tabla migraciones"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"id"),(0,r.kt)("th",{parentName:"tr",align:null},"migration"),(0,r.kt)("th",{parentName:"tr",align:null},"Batch"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"2014_10_12_000000_create_users_table"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"2014_10_12_100000_create_password_reset_tokens_table"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"2019_08_19_000000_create_failed_jobs_table"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"2019_12_14_000001_create_personal_access_tokens_table"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"2023_10_21_205846_create_colores_table"),(0,r.kt)("td",{parentName:"tr",align:null},"2")))),(0,r.kt)("p",null,"La tabla ",(0,r.kt)("strong",{parentName:"p"},"migraciones")," de Laravel es utilizada por el sistema de migraciones de Laravel para realizar un seguimiento de las migraciones que se han ejecutado en la base de datos. A continuaci\xf3n, te explico el significado de cada columna en la tabla:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ID"),": Este es un identificador \xfanico para cada migraci\xf3n. Cada vez que ejecutas una migraci\xf3n, se registra en esta tabla con un nuevo ID. Esto ayuda a realizar un seguimiento de todas las migraciones que se han aplicado.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Nombre de migraci\xf3n"),": Esta columna almacena el nombre del archivo de migraci\xf3n, que suele seguir un formato de fecha y hora, seguido de un nombre descriptivo de la migraci\xf3n. Este nombre es utilizado por Laravel para determinar qu\xe9 migraciones se deben ejecutar y en qu\xe9 orden.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Batch"),': El campo "Batch" indica a qu\xe9 grupo o "lote" de migraciones pertenece esta migraci\xf3n. Esto es \xfatil cuando deseas ejecutar migraciones en lotes separados. Por defecto, todas las migraciones se asignan al lote 1, pero puedes cambiar esto en el c\xf3digo de la migraci\xf3n si deseas agruparlas de manera diferente.'))),(0,r.kt)("p",null,"En resumen, la tabla ",(0,r.kt)("inlineCode",{parentName:"p"},"migraciones")," en Laravel lleva un registro de todas las migraciones que se han aplicado a la base de datos, con informaci\xf3n sobre su orden, identificaci\xf3n y el lote al que pertenecen. Esto es fundamental para mantener la integridad de la base de datos y realizar un seguimiento de los cambios en el esquema a lo largo del tiempo."),(0,r.kt)("h3",{id:"tabla-tipos"},"\ud83d\udcc7Tabla Tipos"),(0,r.kt)("p",null,"En esta tabla guardaremos los distintos de cerveza, como el tipo Ale,IPA,negra,etc."),(0,r.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de categor\xedas"',title:'"Migraci\xf3n',de:!0,'categor\xedas"':!0},"php artisan make:migration create_tipos_table\n")),(0,r.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,r.kt)("p",null,"Sustituya el c\xf3digo generado por el siguiente c\xf3digo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('tipos', function (Blueprint $table) {\n            $table->id();\n            $table->string(`nombre`,100)->unique();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('tipos');\n    }\n};\n\n")),(0,r.kt)("h3",{id:"tabla-paises"},"\ud83d\udcc7Tabla Paises"),(0,r.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de paises"',title:'"Migraci\xf3n',de:!0,'paises"':!0},"php artisan make:migration create_pais_table\n")),(0,r.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,r.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('paises', function (Blueprint $table) {\n            $table->id();\n            $table->string(\"nombre\")->unique();\n            $table->timestamp();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('paises');\n    }\n};\n")),(0,r.kt)("h3",{id:"tabla-graduaciones"},"\ud83d\udcc7Tabla graduaciones"),(0,r.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de categorias"',title:'"Migraci\xf3n',de:!0,'categorias"':!0},"php artisan make:migration create_graduacion_table\n")),(0,r.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,r.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('graduaciones', function (Blueprint $table) {\n            $table->id();\n            $table->string(\"nombre\",50)->unique();\n            $table->timestamp();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('graduaciones');\n    }\n};\n\n\n")),(0,r.kt)("h3",{id:"tabla-cervezas"},"\ud83d\udcc7Tabla Cervezas"),(0,r.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de cervezas"',title:'"Migraci\xf3n',de:!0,'cervezas"':!0},"php artisan make:migration create_cervezas_table\n")),(0,r.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,r.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('cervezas', function (Blueprint $table) {\n            $table->id();\n            $table->string('nombre',150)->unique();\n            $table->text('descripcion');\n            $table->unsignedBigInteger('color_id');\n            $table->foreign('color_id')->references('id')->on('colores');\n            $table->unsignedBigInteger('graduacion_id');\n            $table->foreign('graduacion_id')->references('id')->on('graduaciones');\n            $table->unsignedBigInteger('tipo_id');\n            $table->foreign('tipo_id')->references('id')->on('tipos');\n            $table->unsignedBigInteger('pais_id');\n            $table->foreign('pais_id')->references('id')->on('paises');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('cervezas');\n    }\n};\n")),(0,r.kt)("h3",{id:"integridad-referencial"},"Integridad referencial"),(0,r.kt)("p",null,"La integridad referencial es un concepto en las bases de datos que se refiere a la consistencia y precisi\xf3n de las relaciones entre las tablas. Implica que las relaciones entre las tablas de la base de datos se mantengan de manera coherente y se respeten las restricciones definidas. La integridad referencial es importante por varias razones:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Consistencia de Datos"),": Garantiza que los datos en la base de datos sean coherentes y precisos. Las relaciones entre las tablas reflejan relaciones en el mundo real, lo que ayuda a evitar inconsistencias y errores de datos.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Evita Datos Hu\xe9rfanos"),": Evita que queden registros hu\xe9rfanos o sin relaci\xf3n cuando se eliminan o actualizan registros relacionados en otras tablas. Esto ayuda a mantener la integridad de la base de datos.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Mantiene la Integridad"),": Asegura que las operaciones de eliminaci\xf3n o actualizaci\xf3n en una tabla no generen resultados inesperados o incorrectos en las tablas relacionadas.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Mejora la Calidad de los Datos"),": Contribuye a la calidad de los datos al garantizar que los datos sean precisos y relevantes para las relaciones en la base de datos."))),(0,r.kt)("p",null,'En este ejemplo de c\xf3digo, estamos utilizando migraciones de Laravel para definir la estructura de una tabla llamada "cervezas". En esta tabla, est\xe1s estableciendo relaciones de clave for\xe1nea con otras tablas, como "colores", "graduaciones", "tipos" y "paises". Esto es un ejemplo de c\xf3mo se implementa la integridad referencial en una base de datos.'),(0,r.kt)("p",null,'Cuando defines las relaciones de clave for\xe1nea en la tabla "cervezas", est\xe1s diciendo que el campo ',(0,r.kt)("inlineCode",{parentName:"p"},"color_id")," debe hacer referencia al campo ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),' en la tabla "colores", el campo ',(0,r.kt)("inlineCode",{parentName:"p"},"graduacion_id")," debe hacer referencia al campo ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),' en la tabla "graduaciones", y as\xed sucesivamente. Esto garantiza que solo se puedan insertar valores en la tabla "cervezas" que tengan relaciones v\xe1lidas con las otras tablas.'),(0,r.kt)("p",null,"Por ejemplo, si intentaras insertar una cerveza con un valor de ",(0,r.kt)("inlineCode",{parentName:"p"},"color_id"),' que no existe en la tabla "colores" (violando la integridad referencial), Laravel generar\xeda un error y no permitir\xeda la inserci\xf3n. Esto es importante para mantener la coherencia y la precisi\xf3n de los datos en la base de datos y garantizar que las relaciones entre las tablas se mantengan de manera correcta y consistente.'),(0,r.kt)("admonition",{title:"Importante",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Cuando establecemos una relaci\xf3n entre dos tablas, debemos asegurarnos de que la clave for\xe1nea de la tabla y la tabla hija utilizan el mismo tipo de dato. Si esto no se cumple el motor de base de datos nos dara un error."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"$table->unsignedBigInteger('color_id');\n$table->foreign('color_id')->references('id')->on('colores');\n")),(0,r.kt)("p",{parentName:"admonition"},"En este ejemplo establecemos que la clave for\xe1nea va ser un entero de 64 bits sin signo. Este es el tipo por defecto que establece Laravel para los campos tipo ",(0,r.kt)("strong",{parentName:"p"},"id"),".")),(0,r.kt)("admonition",{title:"Tipos de restricciones para las claves for\xe1neas",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Puedes aplicar varias restricciones a una clave for\xe1nea (FK) en Laravel utilizando el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"on")," en la definici\xf3n de la clave for\xe1nea. Algunas de las restricciones comunes que puedes aplicar incluyen:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ON DELETE CASCADE"),": Esta restricci\xf3n especifica que cuando se elimina el registro principal en la tabla padre, tambi\xe9n se eliminar\xe1n autom\xe1ticamente todos los registros secundarios relacionados en la tabla hija."),(0,r.kt)("p",{parentName:"li"},"Ejemplo:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$table->foreign('color_id')->references('id')->on('colores')->onDelete('cascade');\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ON DELETE SET NULL"),": Esta restricci\xf3n establece el valor de la clave for\xe1nea en NULL cuando se elimina el registro principal en la tabla padre. Esto se utiliza cuando deseas permitir que los registros secundarios queden hu\xe9rfanos."),(0,r.kt)("p",{parentName:"li"},"Ejemplo:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$table->foreign('color_id')->references('id')->on('colores')->onDelete('set null');\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ON DELETE RESTRICT"),": Esta restricci\xf3n evita que se elimine el registro principal si existen registros secundarios relacionados en la tabla hija. Es la restricci\xf3n predeterminada si no se especifica ninguna otra."),(0,r.kt)("p",{parentName:"li"},"Ejemplo:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$table->foreign('color_id')->references('id')->on('colores')->onDelete('restrict');\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ON DELETE NO ACTION"),': Similar a "RESTRICT", esta restricci\xf3n evita que se elimine el registro principal si existen registros secundarios relacionados en la tabla hija.'),(0,r.kt)("p",{parentName:"li"},"Ejemplo:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$table->foreign('color_id')->references('id')->on('colores')->onDelete('no action');\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ON UPDATE CASCADE"),": Esta restricci\xf3n especifica que cuando se actualiza el valor de la clave primaria en la tabla padre, los valores de la clave for\xe1nea en la tabla hija tambi\xe9n se actualizar\xe1n autom\xe1ticamente."),(0,r.kt)("p",{parentName:"li"},"Ejemplo:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$table->foreign('color_id')->references('id')->on('colores')->onUpdate('cascade');\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ON UPDATE SET NULL"),": Esta restricci\xf3n establece el valor de la clave for\xe1nea en NULL cuando se actualiza el valor de la clave primaria en la tabla padre."),(0,r.kt)("p",{parentName:"li"},"Ejemplo:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$table->foreign('color_id')->references('id')->on('colores')->onUpdate('set null');\n")))),(0,r.kt)("p",{parentName:"admonition"},"Estas restricciones te permiten definir c\xf3mo se deben manejar las operaciones de eliminaci\xf3n y actualizaci\xf3n en las relaciones de clave for\xe1nea en Laravel para mantener la integridad referencial en la base de datos. Puedes elegir la restricci\xf3n que mejor se adapte a tus necesidades seg\xfan el comportamiento deseado en tu aplicaci\xf3n.")),(0,r.kt)("h3",{id:"modificando-la-tabla-cervezas"},"\ud83d\udcc7Modificando la tabla cervezas"),(0,r.kt)("p",null,"Hasta ahora hemos visto como crear nuestras tablas, pero no como modificarlas. Vamos a estudiar como modificar nuestra tabla cervezas. Nos hemos dado cuenta que nos hemos dejado dos campos en la tabla.\nUno llamado ",(0,r.kt)("strong",{parentName:"p"},"novedad")," de tipo booleano que indicara si el producto es una novedad y otro ",(0,r.kt)("strong",{parentName:"p"},"oferta")," que indicara si nuestro producto esta en oferta."),(0,r.kt)("p",null,"En la siguiente migraci\xf3n modificaremos la tabla proveedores."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Modficaci\xf3n de la tabla cervezas"',title:'"Modficaci\xf3n',de:!0,la:!0,tabla:!0,'cervezas"':!0},"php artisan make:migration add_fields_cervezas_table\n")),(0,r.kt)("p",null,"Sustituya el c\xf3digo generador por el siguiente c\xf3digo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass ModifyCervezasTable extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up()\n    {\n        Schema::table('cervezas', function (Blueprint $table) {\n            $table->boolean('novedad')->default(false);\n            $table->boolean('oferta')->default(false);\n            $table->decimal('precio', 8, 2)->default(0); // 8 d\xedgitos en total y 2 decimales\n            $table->string('foto')->default('');\n            $table->string('marca', 150)->default('');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down()\n    {\n        Schema::table('cervezas', function (Blueprint $table) {\n            $table->dropColumn(['novedad', 'oferta', 'precio', 'marca']);\n        });\n    }\n}\n")),(0,r.kt)("p",null,"A continuaci\xf3n vamos a ejecutar todas las migraciones pendientes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan migrate\n")),(0,r.kt)("p",null,'Despu\xe9s de ejecutar la migraci\xf3n de "Cervezas" deberemos adaptar el modelo a nuestra tabla a\xf1adiendo los campos que faltan. Edite el modelo ',(0,r.kt)("strong",{parentName:"p"},"Cerveza")," y modifique la propiedad fillable, introduciremos los campos que faltan:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"protected $fillable = [\n        'nombre',\n        'descripcion',\n        'color_id',\n        'graduacion_id',\n        'tipo_id',\n        'pais_id',\n        'novedad',\n        'oferta',\n        'precio', \n        'foto',\n        'marca'\n    ];\n")),(0,r.kt)("h2",{id:"utilizar-sql-nativo"},"Utilizar SQL nativo"),(0,r.kt)("h3",{id:"por-qu\xe9-utilizar-sql-en-nuestras-migraciones"},"\xbfPor qu\xe9 utilizar SQL en nuestras migraciones?"),(0,r.kt)("p",null,"Utilizar SQL nativo en las migraciones de Laravel puede ser una elecci\xf3n apropiada en ciertas situaciones debido a las siguientes justificaciones:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Flexibilidad y Control Total"),": Al escribir SQL nativo en las migraciones, tienes un control total sobre la ejecuci\xf3n de comandos SQL. Esto es fundamental cuando necesitas realizar tareas m\xe1s avanzadas o espec\xedficas que no son directamente compatibles con las funciones proporcionadas por Laravel.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Compatibilidad con Caracter\xedsticas Espec\xedficas de la Base de Datos"),": Cada sistema de gesti\xf3n de bases de datos (DBMS) puede tener caracter\xedsticas espec\xedficas que no se pueden aprovechar completamente utilizando la sintaxis de Laravel. Utilizar SQL nativo te permite explotar las capacidades \xfanicas de tu DBMS.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Optimizaci\xf3n de Rendimiento"),": En ocasiones, escribir SQL personalizado puede ser m\xe1s eficiente en t\xe9rminos de rendimiento que utilizar m\xe9todos de alto nivel de Laravel. Esto es especialmente cierto cuando trabajas con bases de datos masivas o necesitas consultas altamente optimizadas.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Migraciones Heredadas o Externas"),": Si migras una base de datos existente o trabajas con migraciones heredadas escritas en SQL, puede ser m\xe1s sencillo y consistente seguir utilizando SQL nativo en lugar de traducir todo a sintaxis de Laravel.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Conversi\xf3n Gradual"),": A menudo, las migraciones pueden implicar una conversi\xf3n gradual de una base de datos existente a un nuevo esquema. El uso de SQL nativo te permite realizar estas conversiones de manera m\xe1s eficiente sin depender de las capacidades espec\xedficas de Laravel.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Mantenimiento de C\xf3digo Existente"),": Si est\xe1s trabajando en un proyecto heredado que ya utiliza SQL nativo en sus migraciones, mantener la consistencia y la integridad en el c\xf3digo existente puede ser una justificaci\xf3n v\xe1lida para continuar utilizando esta pr\xe1ctica.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Depuraci\xf3n y Pruebas"),": Utilizar SQL nativo puede simplificar la depuraci\xf3n y las pruebas de migraciones, ya que puedes ejecutar y probar directamente las consultas en tu sistema de gesti\xf3n de bases de datos."))),(0,r.kt)("p",null,"Es importante mencionar que mientras SQL nativo puede ser \xfatil en ciertos casos, Laravel ofrece un conjunto de herramientas s\xf3lidas para gestionar migraciones de base de datos a trav\xe9s de su sintaxis espec\xedfica. La elecci\xf3n entre SQL nativo y las funciones de migraci\xf3n de Laravel depende del contexto y de los requisitos del proyecto. En muchos casos, una combinaci\xf3n de ambos enfoques puede ser la soluci\xf3n m\xe1s adecuada."),(0,r.kt)("h3",{id:"creaci\xf3n-de-vistas"},"Creaci\xf3n de vistas"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        // Ejecuta la sentencia SQL para crear o reemplazar la vista\n        DB::statement('\n            CREATE OR REPLACE VIEW v_cervezas AS\n            SELECT \n                cer.id AS id,\n                cer.nombre AS nombre,\n                cer.descripcion AS descripcion,\n                cer.color_id AS color_id,\n                cer.graduacion_id AS graduacion_id,\n                cer.novedad AS novedad,\n                cer.oferta AS oferta,\n                cer.precio AS precio,\n                cer.foto AS foto,\n                cer.marca AS marca,\n                col.nombre AS color,\n                g.nombre AS graduacion,\n                t.nombre AS tipo,\n                p.nombre AS pais\n            FROM\n                cervezas cer\n                JOIN colores col ON (cer.color_id = col.id)\n                JOIN graduaciones g ON (cer.graduacion_id = g.id)\n                JOIN tipos t ON (t.id = cer.tipo_id)\n                JOIN paises p ON (p.id = cer.pais_id)\n            ORDER BY nombre\n        ');\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        // Si deseas eliminar la vista en una migraci\xf3n de reversi\xf3n, puedes hacerlo as\xed:\n        DB::statement('DROP VIEW IF EXISTS v_cervezas');\n    }\n};\n")),(0,r.kt)(d,{mdxType:"TablaConImagenes"}),(0,r.kt)("h3",{id:"creaci\xf3n-de-triggers"},"Creaci\xf3n de triggers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass CreateTriggerCervezas extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up()\n    {\n        // Crear la tabla cervezas_copia\n        DB::unprepared('\n        CREATE TABLE cervezas_copia AS\n        SELECT *, \"INSERT\" AS operacion, NOW() AS fecha_operacion\n        FROM cervezas WHERE 1=0;\n    ');\n    \n\n\n        // Crear el trigger\n        DB::unprepared('\n            CREATE TRIGGER copiar_cervezas_after_update\n            AFTER UPDATE ON cervezas FOR EACH ROW\n            BEGIN\n                INSERT INTO cervezas_copia (id, nombre, descripcion, color_id, graduacion_id, tipo_id, pais_id, created_at, updated_at, operacion,fecha_operacion)\n                SELECT OLD.id, NEW.nombre, OLD.descripcion, OLD.color_id, OLD.graduacion_id, OLD.tipo_id, OLD.pais_id, OLD.created_at, OLD.updated_at, \"UPDATE\",NOW();\n            END;\n        ');\n    \n\n        DB::unprepared('\n            CREATE TRIGGER copiar_cervezas_before_delete\n            BEFORE DELETE ON cervezas FOR EACH ROW\n            BEGIN\n                INSERT INTO cervezas_copia (id, nombre, descripcion, color_id, graduacion_id, tipo_id, pais_id, created_at, updated_at, operacion,fecha_operacion)\n                SELECT OLD.id, OLD.nombre, OLD.descripcion, OLD.color_id, OLD.graduacion_id, OLD.tipo_id, OLD.pais_id, OLD.created_at, NOW(), \"DELETE\",NOW();\n            END;\n        ');\n    \n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down()\n    {\n        // Eliminar los triggers\n        DB::unprepared('DROP TRIGGER IF EXISTS copiar_cervezas_after_update');\n\n        // Eliminar los triggers\n        DB::unprepared('DROP TRIGGER IF EXISTS copiar_cervezas_before_delete');\n\n\n        // Eliminar la tabla cervezas_copia\n        DB::unprepared('DROP TABLE IF EXISTS cervezas_copia');\n    }\n}\n")),(0,r.kt)("h3",{id:"creaci\xf3n-de-procedimientos-almacenados"},"Creaci\xf3n de procedimientos almacenados"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Support\\Facades\\DB;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up()\n    {\n        DB::unprepared('\n        CREATE PROCEDURE IF NOT EXISTS GetCervezasByPais(IN paisId INT)\n        BEGIN\n            SELECT * FROM cervezas WHERE pais_id = paisId;\n        END;\n    ');\n    }\n    \n    /**\n     * Reverse the migrations.\n     */\n    public function down()\n    {\n        DB::unprepared('DROP PROCEDURE IF EXISTS GetCervezasByPais');\n    }\n};\n")))}m.isMDXComponent=!0},3844:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/er-1cc6930650253a472365bd4ac9ff7af0.png"}}]);