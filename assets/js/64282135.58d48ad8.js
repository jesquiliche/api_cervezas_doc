"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[407],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>h});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),u=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},c=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return a?t.createElement(h,s(s({ref:n},c),{},{components:a})):t.createElement(h,s({ref:n},c))}));function h(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=a[u];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8029:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var t=a(7462),r=(a(7294),a(3905));const o={sidebar_position:1},s="JSON Web Token",i={unversionedId:"jwr/jwt",id:"jwr/jwt",title:"JSON Web Token",description:"\xbfQu\xe9 es JWT?",source:"@site/docs/jwr/jwt.md",sourceDirName:"jwr",slug:"/jwr/jwt",permalink:"/api_cervezas_doc/docs/jwr/jwt",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/jwr/jwt.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Autenticaci\xf3n, seguridad y pruebas",permalink:"/api_cervezas_doc/docs/category/autenticaci\xf3n-seguridad-y-pruebas"},next:{title:"SWAGGER",permalink:"/api_cervezas_doc/docs/swagger"}},l={},u=[{value:"\xbfQu\xe9 es JWT?",id:"qu\xe9-es-jwt",level:2},{value:"Instalaci\xf3n y configuraci\xf3n de JWT",id:"instalaci\xf3n-y-configuraci\xf3n-de-jwt",level:2},{value:"Instalar y configurar JWT",id:"instalar-y-configurar-jwt",level:3},{value:"Configuraci\xf3n de AuthGuard",id:"configuraci\xf3n-de-authguard",level:3},{value:"Modificar el modelo User",id:"modificar-el-modelo-user",level:3},{value:"Crear la ruta",id:"crear-la-ruta",level:3},{value:"Crear el controlador Auth",id:"crear-el-controlador-auth",level:3},{value:"Rutas protegidas",id:"rutas-protegidas",level:2},{value:"Introducci\xf3n a Rutas Protegidas en APIs con Laravel:",id:"introducci\xf3n-a-rutas-protegidas-en-apis-con-laravel",level:3},{value:"1. <strong>Autenticaci\xf3n API:</strong>",id:"1-autenticaci\xf3n-api",level:4},{value:"2. <strong>C\xf3mo se Aplica el Middleware <code>auth:api</code>:</strong>",id:"2-c\xf3mo-se-aplica-el-middleware-authapi",level:4},{value:"3. <strong>Personalizaci\xf3n del Middleware:</strong>",id:"3-personalizaci\xf3n-del-middleware",level:4},{value:"4. <strong>Tokens de Acceso:</strong>",id:"4-tokens-de-acceso",level:4},{value:"5. <strong>Gesti\xf3n de Tokens:</strong>",id:"5-gesti\xf3n-de-tokens",level:4},{value:"6. <strong>Protecci\xf3n contra Ataques CSRF:</strong>",id:"6-protecci\xf3n-contra-ataques-csrf",level:4},{value:"7. <strong>Pruebas en Entornos de Desarrollo:</strong>",id:"7-pruebas-en-entornos-de-desarrollo",level:4},{value:"Puesta en practica",id:"puesta-en-practica",level:3},{value:"Probando las rutas",id:"probando-las-rutas",level:3}],c={toc:u},p="wrapper";function d(e){let{components:n,...a}=e;return(0,r.kt)(p,(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"json-web-token"},"JSON Web Token"),(0,r.kt)("h2",{id:"qu\xe9-es-jwt"},"\xbfQu\xe9 es JWT?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JSON Web Token (JWT)")," es un est\xe1ndar de internet que define una forma de transferir informaci\xf3n segura entre partes como un token. La informaci\xf3n puede ser verificada y confiable debido a que es firmada digitalmente."),(0,r.kt)("p",null,"JWT se compone de tres partes: header, payload y signature. El header describe el tipo de token y la forma en que se firma, el payload contiene la informaci\xf3n a transferir, y la signature se utiliza para verificar que la informaci\xf3n no ha sido alterada en tr\xe1nsito."),(0,r.kt)("p",null,"JWT se utiliza a menudo en aplicaciones de autenticaci\xf3n y autorizaci\xf3n, en las que el cliente env\xeda una solicitud a un servidor con un token JWT y el servidor valida la autenticidad del token antes de proporcionar acceso a los recursos protegidos."),(0,r.kt)("p",null,"En resumen, JWT es una forma eficiente y segura de transmitir informaci\xf3n entre partes a trav\xe9s de un token que puede ser verificado y confiable."),(0,r.kt)("h2",{id:"instalaci\xf3n-y-configuraci\xf3n-de-jwt"},"Instalaci\xf3n y configuraci\xf3n de JWT"),(0,r.kt)("h3",{id:"instalar-y-configurar-jwt"},"Instalar y configurar JWT"),(0,r.kt)("p",null," instalaremos y configuraremos el paquete de autenticaci\xf3n JWT de Laravel Usaremos ",(0,r.kt)("strong",{parentName:"p"},"php-open-source-saver/jwt-auth"),", un fork de ",(0,r.kt)("strong",{parentName:"p"},"tymondesign/jwt-auth"),", ya que ",(0,r.kt)("strong",{parentName:"p"},"tymondesign/jwt-auth")," parece haber sido abandonado y no es compatible con Laravel 9."),(0,r.kt)("p",null,"Instale la versi\xf3n m\xe1s nueva del paquete usando este comando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"composer require php-open-source-saver/jwt-auth\n")),(0,r.kt)("p",null,"A continuaci\xf3n, necesitamos hacer p\xfablicas las configuraciones del paquete. Copie el archivo de configuraci\xf3n de JWT desde el proveedor a confi/jwt.php con este comando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'php artisan vendor:publish --provider="PHPOpenSourceSaver\\JWTAuth\\Providers\\LaravelServiceProvider"\n')),(0,r.kt)("p",null,"Ahora, necesitamos generar una clave secreta para manejar el cifrado del token. Para hacerlo, ejecute este comando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bah"},"php artisan jwt:secret\n")),(0,r.kt)("p",null,"Esto actualizar\xe1 nuestro archivo .env con algo como esto:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JWT_SECRET=xxxxxxxx"),"\nEsta es la clave que se utilizar\xe1 para firmar nuestros tokens."),(0,r.kt)("h3",{id:"configuraci\xf3n-de-authguard"},"Configuraci\xf3n de AuthGuard"),(0,r.kt)("p",null,"Dentro del archivo ",(0,r.kt)("strong",{parentName:"p"},"config/auth.php"),", tendremos que hacer algunos cambios para configurar Laravel para usar el JWT AuthGuard para alimentar la autenticaci\xf3n de la aplicaci\xf3n."),(0,r.kt)("p",null,"Primero, haremos los siguientes cambios en el archivo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Defaults\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default authentication \"guard\" and password\n    | reset options for your application. You may change these defaults\n    | as required, but they're a perfect start for most applications.\n    |\n    */\n\n    'defaults' => [\n        'guard' => 'api',\n        'passwords' => 'users',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Guards\n    |--------------------------------------------------------------------------\n    |\n    | Next, you may define every authentication guard for your application.\n    | Of course, a great default configuration has been defined for you\n    | here which uses session storage and the Eloquent user provider.\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | Supported: \"session\"\n    |\n    */\n\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n\n        'api' => [\n            'driver' => 'jwt',\n            'provider' => 'users',\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | User Providers\n    |--------------------------------------------------------------------------\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | If you have multiple user tables or models you may configure multiple\n    | sources which represent each model / table. These sources may then\n    | be assigned to any extra authentication guards you have defined.\n    |\n    | Supported: \"database\", \"eloquent\"\n    |\n    */\n\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => App\\Models\\User::class,\n        ],\n\n        // 'users' => [\n        //     'driver' => 'database',\n        //     'table' => 'users',\n        // ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Resetting Passwords\n    |--------------------------------------------------------------------------\n    |\n    | You may specify multiple password reset configurations if you have more\n    | than one user table or model in the application and you want to have\n    | separate password reset settings based on the specific user types.\n    |\n    | The expiry time is the number of minutes that each reset token will be\n    | considered valid. This security feature keeps tokens short-lived so\n    | they have less time to be guessed. You may change this as needed.\n    |\n    | The throttle setting is the number of seconds a user must wait before\n    | generating more password reset tokens. This prevents the user from\n    | quickly generating a very large amount of password reset tokens.\n    |\n    */\n\n    'passwords' => [\n        'users' => [\n            'provider' => 'users',\n            'table' => 'password_reset_tokens',\n            'expire' => 60,\n            'throttle' => 60,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Password Confirmation Timeout\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define the amount of seconds before a password confirmation\n    | times out and the user is prompted to re-enter their password via the\n    | confirmation screen. By default, the timeout lasts for three hours.\n    |\n    */\n\n    'password_timeout' => 10800,\n\n];\n")),(0,r.kt)("p",null,"En este c\xf3digo, estamos diciendo al guardi\xe1n API que use el controlador JWT y que haga del guardi\xe1n API el predeterminado."),(0,r.kt)("p",null,"\xa1Ahora, podemos usar el mecanismo de autenticaci\xf3n integrado de Laravel, con jwt-auth manejando el trabajo pesado!"),(0,r.kt)("h3",{id:"modificar-el-modelo-user"},"Modificar el modelo User"),(0,r.kt)("p",null,"Para implementar el contrato PHPOpenSourceSaverJWTAuthContractsJWTSubject en nuestro modelo de Usuario, usaremos dos m\xe9todos: getJWTCustomClaims() y getJWTIdentifier()."),(0,r.kt)("p",null,"Reemplaza el c\xf3digo en el archivo app/Models/User.php con lo siguiente:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Models;\n\nuse Laravel\\Sanctum\\HasApiTokens;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse PHPOpenSourceSaver\\JWTAuth\\Contracts\\JWTSubject;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements JWTSubject\n{\n    use HasApiTokens, HasFactory, Notifiable;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<int, string>\n     */\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n    ];\n\n    /**\n     * The attributes that should be hidden for serialization.\n     *\n     * @var array<int, string>\n     */\n    protected $hidden = [\n        'password',\n        'remember_token',\n    ];\n\n    /**\n     * The attributes that should be cast.\n     *\n     * @var array<string, string>\n     */\n    protected $casts = [\n        'email_verified_at' => 'datetime',\n    ];\n\n    /**\n     * Get the identifier that will be stored in the subject claim of the JWT.\n     *\n     * @return mixed\n     */\n    public function getJWTIdentifier()\n    {\n        return $this->getKey();\n    }\n\n    /**\n     * Return a key value array, containing any custom claims to be added to the JWT.\n     *\n     * @return array\n     */\n    public function getJWTCustomClaims()\n    {\n        return [];\n    }\n}\n")),(0,r.kt)("p",null,"\xa1Eso es todo para nuestra configuraci\xf3n de modelos!"),(0,r.kt)("h3",{id:"crear-la-ruta"},"Crear la ruta"),(0,r.kt)("p",null,"A continuaci\xf3n crearemos las rutas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=routes\\api.php",title:"routes\\api.php"},"<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\API\\AuthController;\n\nRoute::controller(AuthController::class)->group(function () {\n    Route::post('login', 'login');\n    Route::post('register', 'register');\n    Route::post('logout', 'logout');\n    Route::post('refresh', 'refresh');\n});\n")),(0,r.kt)("h3",{id:"crear-el-controlador-auth"},"Crear el controlador Auth"),(0,r.kt)("p",null,"Ahora, crearemos un controlador para manejar la l\xf3gica central del proceso de autenticaci\xf3n."),(0,r.kt)("p",null,"Primero, ejecutaremos este comando para generar el controlador:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"php artisan make:controller API/AuthController\n")),(0,r.kt)("p",null,"Luego, reemplazaremos el contenido del controlador con el siguiente fragmento de c\xf3digo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass AuthController extends Controller\n{\n    public function __construct()\n    {\n        $this->middleware('auth:api', ['except' => ['login', 'register']]);\n    }\n\n    public function login(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'email' => 'required|string|email',\n            'password' => 'required|string',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $credentials = $request->only('email', 'password');\n        $token = Auth::attempt($credentials);\n        \n        if (!$token) {\n            return response()->json([\n                'message' => 'Unauthorized',\n            ], 401);\n        }\n\n        $user = Auth::user();\n        return response()->json([\n            'user' => $user,\n            'authorization' => [\n                'token' => $token,\n                'type' => 'bearer',\n            ]\n        ]);\n    }\n\n    public function register(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'name' => 'required|string|max:255',\n            'email' => 'required|string|email|max:255|unique:users',\n            'password' => 'required|string|min:6',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $user = User::create([\n            'name' => $request->name,\n            'email' => $request->email,\n            'password' => Hash::make($request->password),\n        ]);\n\n        $token = Auth::login($user);\n        return response()->json([\n            'status' => 'success',\n            'message' => 'User created successfully',\n            'user' => $user,\n            'authorization' => [\n                'token' => $token,\n                'type' => 'bearer',\n            ]\n        ]);\n    }\n\n    public function logout()\n    {\n        Auth::logout();\n        return response()->json([\n            'message' => 'Successfully logged out',\n        ]);\n    }\n\n    public function refresh()\n    {\n        return response()->json([\n            'user' => Auth::user(),\n            'authorization' => [\n                'token' => Auth::refresh(),\n                'type' => 'bearer',\n            ]\n        ]);\n    }\n}\n")),(0,r.kt)("p",null,"Este es un r\xe1pido resumen de las funciones p\xfablicas en el AuthController:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"constructor:")," Establecemos esta funci\xf3n en nuestra clase controladora para que podamos usar el middleware auth:api dentro de ella para bloquear el acceso no autenticado a ciertos m\xe9todos dentro del controlador."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"login:")," Este m\xe9todo autentica a un usuario con su correo electr\xf3nico y contrase\xf1a. Cuando un usuario es autenticado con \xe9xito, el m\xe9todo attempt() de la fachada Auth devuelve el token JWT. El token generado se recupera y se devuelve como JSON con el objeto usuario.\nregister: Este m\xe9todo crea el registro de usuario y inicia sesi\xf3n en el usuario con la generaci\xf3n de tokens."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"logout:")," Este m\xe9todo invalida el token de Auth de usuario."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"refresh:")," Este m\xe9todo invalida el token de Auth de usuario y genera un nuevo token.")),(0,r.kt)("p",null,"Quedara por incluir el siguiente constructor a todos nuestros controladores:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"public function __construct()\n    {\n        $this->middleware('auth:api');\n    }\n")),(0,r.kt)("p",null,"\xa1Hemos terminado de configurar nuestra autenticaci\xf3n JWT!"),(0,r.kt)("h2",{id:"rutas-protegidas"},"Rutas protegidas"),(0,r.kt)("p",null,"En el contexto de APIs, la autenticaci\xf3n y protecci\xf3n de rutas son igualmente cruciales para asegurarse de que solo usuarios autorizados puedan acceder a los recursos protegidos. Laravel ofrece varias opciones para implementar rutas protegidas en el contexto de APIs."),(0,r.kt)("h3",{id:"introducci\xf3n-a-rutas-protegidas-en-apis-con-laravel"},"Introducci\xf3n a Rutas Protegidas en APIs con Laravel:"),(0,r.kt)("h4",{id:"1-autenticaci\xf3n-api"},"1. ",(0,r.kt)("strong",{parentName:"h4"},"Autenticaci\xf3n API:")),(0,r.kt)("p",null,"En una API, la autenticaci\xf3n suele realizarse mediante tokens de acceso. Laravel proporciona una autenticaci\xf3n API incorporada que se puede lograr a trav\xe9s de Passport o utilizando el middleware ",(0,r.kt)("inlineCode",{parentName:"p"},"auth:api")," predeterminado."),(0,r.kt)("h4",{id:"2-c\xf3mo-se-aplica-el-middleware-authapi"},"2. ",(0,r.kt)("strong",{parentName:"h4"},"C\xf3mo se Aplica el Middleware ",(0,r.kt)("inlineCode",{parentName:"strong"},"auth:api"),":")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Aplica el middleware ",(0,r.kt)("inlineCode",{parentName:"p"},"auth:api")," directamente a una ruta espec\xedfica:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"use App\\Http\\Controllers\\ProfileController;\nRoute::get('/profile', [ProfileController::class, 'show'])->middleware('auth:api');\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"O agr\xfapalo en un grupo de rutas protegidas:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},"Route::middleware(['auth:api'])->group(function () {\n    // Rutas protegidas para la API\n    Route::get('/profile', 'ProfileController@show');\n    // Otras rutas...\n});\n")))),(0,r.kt)("h4",{id:"3-personalizaci\xf3n-del-middleware"},"3. ",(0,r.kt)("strong",{parentName:"h4"},"Personalizaci\xf3n del Middleware:")),(0,r.kt)("p",null,"Puedes personalizar el middleware ",(0,r.kt)("inlineCode",{parentName:"p"},"auth:api")," para incluir l\xf3gica espec\xedfica para tu aplicaci\xf3n, como verificaci\xf3n de roles o permisos."),(0,r.kt)("h4",{id:"4-tokens-de-acceso"},"4. ",(0,r.kt)("strong",{parentName:"h4"},"Tokens de Acceso:")),(0,r.kt)("p",null,"Para acceder a rutas protegidas en una API, los clientes deben incluir un token de acceso v\xe1lido en la solicitud. Este token se obtiene generalmente mediante el proceso de autenticaci\xf3n (login) y se incluye en el encabezado ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," de las solicitudes subsiguientes."),(0,r.kt)("h4",{id:"5-gesti\xf3n-de-tokens"},"5. ",(0,r.kt)("strong",{parentName:"h4"},"Gesti\xf3n de Tokens:")),(0,r.kt)("p",null,"Si est\xe1s utilizando Passport, Laravel proporciona un sistema completo para gestionar tokens de acceso, incluida la revocaci\xf3n de tokens."),(0,r.kt)("h4",{id:"6-protecci\xf3n-contra-ataques-csrf"},"6. ",(0,r.kt)("strong",{parentName:"h4"},"Protecci\xf3n contra Ataques CSRF:")),(0,r.kt)("p",null,"Cuando trabajas con APIs, no hay CSRF (Cross-Site Request Forgery) ya que no hay sesiones de navegador involucradas. Sin embargo, a\xfan es esencial proteger contra otros tipos de ataques, como SQL injection."),(0,r.kt)("h4",{id:"7-pruebas-en-entornos-de-desarrollo"},"7. ",(0,r.kt)("strong",{parentName:"h4"},"Pruebas en Entornos de Desarrollo:")),(0,r.kt)("p",null,"Utiliza herramientas como Postman o cURL para probar tus rutas protegidas durante el desarrollo. Aseg\xfarate de incluir el token de acceso v\xe1lido en las solicitudes."),(0,r.kt)("p",null,"En resumen, las rutas protegidas en APIs se centran en la autenticaci\xf3n mediante tokens de acceso. Laravel facilita la implementaci\xf3n de este concepto a trav\xe9s del middleware ",(0,r.kt)("inlineCode",{parentName:"p"},"auth:api")," y proporciona herramientas adicionales para gestionar la autenticaci\xf3n y autorizaci\xf3n de manera eficiente en el contexto de APIs."),(0,r.kt)("h3",{id:"puesta-en-practica"},"Puesta en practica"),(0,r.kt)("p",null,"Vamos a ver como implementar las rutas protegidas en nuestro contralador ",(0,r.kt)("strong",{parentName:"p"},"CervezaController"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"public function __construct()\n    {\n        $this->middleware('auth:api')->only(['store', 'destroy','update','patch']);\n    }\n")),(0,r.kt)("p",null,"Con este c\xf3digo le estamos indicando al constructor de nuestra clase ",(0,r.kt)("strong",{parentName:"p"},"CervezaController")," que solo los m\xe9todos ",(0,r.kt)("strong",{parentName:"p"},"store"),",",(0,r.kt)("strong",{parentName:"p"},"delete"),",",(0,r.kt)("strong",{parentName:"p"},"update")," y ",(0,r.kt)("strong",{parentName:"p"},"patch")," necesitan de autenticaci\xf3n. Tambi\xe9n podr\xedamos hacer al reves como en el caso del controlador ",(0,r.kt)("strong",{parentName:"p"},"AuthController"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"public function __construct()\n    {\n        $this->middleware('auth:api', ['except' => ['login', 'register']]);\n    }\n")),(0,r.kt)("p",null,"En este caso le estamos indicando a nuestro controlador AuthController que todos los m\xe9todos de la clase a excepci\xf3n de los m\xe9todos ",(0,r.kt)("strong",{parentName:"p"},"login")," y ",(0,r.kt)("strong",{parentName:"p"},"register")," est\xe1n protegidos por el middleware ",(0,r.kt)("inlineCode",{parentName:"p"},"auth:api"),". Puede replicar este mismo constructor para el resto de controladores."),(0,r.kt)("h3",{id:"probando-las-rutas"},"Probando las rutas"),(0,r.kt)("p",null,"Para probar nuestras rutas protegidas podemos utilizar el mismo archivo de rutas que hemos utilizado en apartados anteriores, a\xf1adiendo unos pocas modificaciones."),(0,r.kt)("p",null,"1.- Introduciremos una variable en nuestro archivo que nos permitir\xe1 guardar nuestro ",(0,r.kt)("strong",{parentName:"p"},"token"),", el cual obtendremos haciendo login."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"@accessToken = Su token\n")),(0,r.kt)("p",null,"En todas las rutas que necesiten autenticaci\xf3n introduciremos el siguiente texto en el header."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Authorization: Bearer {{accessToken}}\n")),(0,r.kt)("p",null,"A continuaci\xf3n le mostramos como deber\xeda quedar este archivo de rutas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'@accessToken = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzAwMjE5NzcwLCJleHAiOjE3MDAyMjMzNzAsIm5iZiI6MTcwMDIxOTc3MCwianRpIjoiMlNBNHU3dmtDenZZTkZyaCIsInN1YiI6IjIyIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.P8ufvwBKvOj6hS86FI-5e57iA_Y7eLu42mzvawM7l6g\n\n#### Registrarse\nPOST  http://127.0.0.1:8000/api/register\nContent-Type: application/json\n\n{\n    "name":"Jesus",\n    "email":"jesquiliche@hotmail.com",\n    "password":"1234678"\n}\n\n#### Login\nPOST  http://127.0.0.1:8000/api/login\nContent-Type: application/json\n\n{\n    "email":"jesquiliche@hotmail.com",\n    "password":"1234678"\n}\n\n#### Logout\nPOST  http://127.0.0.1:8000/api/logout\nAuthorization: Bearer {{accessToken}}\n\n#### refresh\nPOST  http://127.0.0.1:8000/api/refresh\nAuthorization: Bearer {{accessToken}}\n\n\n#### Obtener todos los colores\nGET http://localhost:8000/api/v1/colores\n\n### Crear color\nPOST   http://localhost:8000/api/v1/colores\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Rojo"\n}\n\n### Obtener color por Id\nGET   http://localhost:8000/api/v1/colores/1\n\n\n### Modificicar color\nDELETE   http://localhost:8000/api/v1/colores/1\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Prueba 2"\n}\n\n#### Obtener todos los paises\nGET http://localhost:8000/api/v1/paises\n\n#### Obtener pais por su id\nGET http://localhost:8000/api/v1/paises/5\n\n### Crear pa\xeds\nPOST   http://localhost:8000/api/v1/paises\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Peru"\n}\n\n### Modificar  pa\xeds\nPUT   http://localhost:8000/api/v1/paises/1\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Pais modificado"\n}\n\n### Borrando pais\nDELETE   http://localhost:8000/api/v1/paises/9\nAuthorization: Bearer {{accessToken}}\n\n\n#### Obtener todos los tipos\nGET http://localhost:8000/api/v1/tipos\n\n#### Obtener tipo por su id\nGET http://localhost:8000/api/v1/tipos/5\n\n### Crear tipo\nPOST   http://localhost:8000/api/v1/tipos\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Sin alcohol"\n}\n\n### Modificar tipo\nPUT   http://localhost:8000/api/v1/tipos/1\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Doble malta"\n}\n\n### Borrar tipo\nDELETE   http://localhost:8000/api/v1/tipos/2\nAuthorization: Bearer {{accessToken}}\n\n#### Obtener todas las graduaciones\nGET http://localhost:8000/api/v1/graduaciones\n\n#### Obtener graduaci\xf3n por su id\nGET http://localhost:8000/api/v1/graduaciones/5\n\n### Crear graduaci\xf3n\nPOST   http://localhost:8000/api/v1/tipos\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Super toxica"\n}\n\n### Modificar tipo\nPUT   http://localhost:8000/api/v1/graduaciones/3\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Puro alcohol"\n}\n\n### Bor6543rar tipo\nDELETE   http://localhost:8000/api/v1/graduaciones/1\nAuthorization: Bearer {{accessToken}}\n\n\n#### Obtener las cervezas\nGET http://localhost:8000/api/v1/cervezas\n\n#### Obtener las cervezas\nGET http://localhost:8000/api/v1/cervezas?per_page=1&novedad=0&marca=a\n\n#### Crear cerveza\nPOST   http://localhost:8000/api/v1/cervezas\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Cerveza Voldamm14",\n    "descripcion":"La mejor cerveza de espa\xf1a",\n    "color_id":4,\n    "graduacion_id":2,\n    "tipo_id":1,\n    "pais_id":1,\n    "novedad":1,\n    "oferta":1,\n    "precio":0,\n    "foto":"imagen",\n    "marca":"damm"\n}\n\n#### Modificar cerveza\nPUT   http://localhost:8000/api/v1/cervezas/14\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Cerveza Voldamm Modificada",\n    "descripcion":"La mejor cerveza de espa\xf1a erer",\n    "color_id":4,\n    "graduacion_id":2,\n    "tipo_id":1,\n    "pais_id":1,\n    "novedad":1,\n    "oferta":1,\n    "precio":0,\n    "marca":"damm"\n}\n\n#### Modificar cerveza\nPATCH  http://localhost:8000/api/v1/cervezas/14\nContent-Type: application/json\nAuthorization: Bearer {{accessToken}}\n\n{\n    "nombre":"Cerveza Voldamm Modif 2",\n    "descripcion":"La mejor cerveza de espa\xf1a erer",\n    "color_id":4,\n    "graduacion_id":2,\n    "marca":"damm"\n}\n\n#### Borrar cerveza\nDELETE  http://localhost:8000/api/v1/cervezas/15\nAuthorization: Bearer {{accessToken}}\n')))}d.isMDXComponent=!0}}]);